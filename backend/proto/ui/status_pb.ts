/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,eslint_disable,ts_nocheck,generate_dependencies,long_type_number
// @generated from protobuf file "ui/status.proto" (package "ui", syntax proto3)
// tslint:disable
// @ts-nocheck
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServerStatusResponse } from "../observer/observer_pb";
import { GetNodesResponse } from "../observer/observer_pb";
/**
 * @generated from protobuf message ui.GetStatusRequest
 */
export interface GetStatusRequest {
}
/**
 * @generated from protobuf message ui.GetStatusResponse
 */
export interface GetStatusResponse {
    /**
     * @generated from protobuf field: observer.GetNodesResponse nodes = 1;
     */
    nodes?: GetNodesResponse;
    /**
     * @generated from protobuf field: observer.ServerStatusResponse server_status = 2;
     */
    serverStatus?: ServerStatusResponse;
    /**
     * @generated from protobuf field: repeated ui.DeployedComponent versions = 3;
     */
    versions: DeployedComponent[];
    /**
     * @generated from protobuf field: ui.FlowStats flows = 4;
     */
    flows?: FlowStats;
}
/**
 * @generated from protobuf message ui.NodeStatus
 */
export interface NodeStatus {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: bool is_available = 2;
     */
    isAvailable: boolean;
}
/**
 * @generated from protobuf message ui.DeployedComponent
 */
export interface DeployedComponent {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string version = 2;
     */
    version: string;
}
/**
 * @generated from protobuf message ui.FlowStats
 */
export interface FlowStats {
    /**
     * @generated from protobuf field: float per_second = 1;
     */
    perSecond: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetStatusRequest$Type extends MessageType<GetStatusRequest> {
    constructor() {
        super("ui.GetStatusRequest", []);
    }
    create(value?: PartialMessage<GetStatusRequest>): GetStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStatusRequest): GetStatusRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ui.GetStatusRequest
 */
export const GetStatusRequest = new GetStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStatusResponse$Type extends MessageType<GetStatusResponse> {
    constructor() {
        super("ui.GetStatusResponse", [
            { no: 1, name: "nodes", kind: "message", T: () => GetNodesResponse },
            { no: 2, name: "server_status", kind: "message", T: () => ServerStatusResponse },
            { no: 3, name: "versions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeployedComponent },
            { no: 4, name: "flows", kind: "message", T: () => FlowStats }
        ]);
    }
    create(value?: PartialMessage<GetStatusResponse>): GetStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.versions = [];
        if (value !== undefined)
            reflectionMergePartial<GetStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStatusResponse): GetStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* observer.GetNodesResponse nodes */ 1:
                    message.nodes = GetNodesResponse.internalBinaryRead(reader, reader.uint32(), options, message.nodes);
                    break;
                case /* observer.ServerStatusResponse server_status */ 2:
                    message.serverStatus = ServerStatusResponse.internalBinaryRead(reader, reader.uint32(), options, message.serverStatus);
                    break;
                case /* repeated ui.DeployedComponent versions */ 3:
                    message.versions.push(DeployedComponent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* ui.FlowStats flows */ 4:
                    message.flows = FlowStats.internalBinaryRead(reader, reader.uint32(), options, message.flows);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* observer.GetNodesResponse nodes = 1; */
        if (message.nodes)
            GetNodesResponse.internalBinaryWrite(message.nodes, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* observer.ServerStatusResponse server_status = 2; */
        if (message.serverStatus)
            ServerStatusResponse.internalBinaryWrite(message.serverStatus, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ui.DeployedComponent versions = 3; */
        for (let i = 0; i < message.versions.length; i++)
            DeployedComponent.internalBinaryWrite(message.versions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ui.FlowStats flows = 4; */
        if (message.flows)
            FlowStats.internalBinaryWrite(message.flows, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ui.GetStatusResponse
 */
export const GetStatusResponse = new GetStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeStatus$Type extends MessageType<NodeStatus> {
    constructor() {
        super("ui.NodeStatus", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_available", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<NodeStatus>): NodeStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.isAvailable = false;
        if (value !== undefined)
            reflectionMergePartial<NodeStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NodeStatus): NodeStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool is_available */ 2:
                    message.isAvailable = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NodeStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool is_available = 2; */
        if (message.isAvailable !== false)
            writer.tag(2, WireType.Varint).bool(message.isAvailable);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ui.NodeStatus
 */
export const NodeStatus = new NodeStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeployedComponent$Type extends MessageType<DeployedComponent> {
    constructor() {
        super("ui.DeployedComponent", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeployedComponent>): DeployedComponent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.version = "";
        if (value !== undefined)
            reflectionMergePartial<DeployedComponent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeployedComponent): DeployedComponent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeployedComponent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ui.DeployedComponent
 */
export const DeployedComponent = new DeployedComponent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlowStats$Type extends MessageType<FlowStats> {
    constructor() {
        super("ui.FlowStats", [
            { no: 1, name: "per_second", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<FlowStats>): FlowStats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.perSecond = 0;
        if (value !== undefined)
            reflectionMergePartial<FlowStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FlowStats): FlowStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float per_second */ 1:
                    message.perSecond = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FlowStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float per_second = 1; */
        if (message.perSecond !== 0)
            writer.tag(1, WireType.Bit32).float(message.perSecond);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ui.FlowStats
 */
export const FlowStats = new FlowStats$Type();
