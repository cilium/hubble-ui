/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,eslint_disable,ts_nocheck,generate_dependencies,long_type_number
// @generated from protobuf file "ui/notifications.proto" (package "ui", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GetStatusResponse } from "./status_pb";
/**
 * @generated from protobuf message ui.Notification
 */
export interface Notification {
    /**
     * @generated from protobuf oneof: notification
     */
    notification: {
        oneofKind: "connState";
        /**
         * @generated from protobuf field: ui.ConnectionState conn_state = 1;
         */
        connState: ConnectionState;
    } | {
        oneofKind: "dataState";
        /**
         * @generated from protobuf field: ui.DataState data_state = 2;
         */
        dataState: DataState;
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: ui.GetStatusResponse status = 3;
         */
        status: GetStatusResponse;
    } | {
        oneofKind: "noPermission";
        /**
         * @generated from protobuf field: ui.NoPermission no_permission = 4;
         */
        noPermission: NoPermission;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ui.ConnectionState
 */
export interface ConnectionState {
    /**
     * Backend is successfully connected to hubble-relay
     *
     * @generated from protobuf field: bool relay_connected = 1;
     */
    relayConnected: boolean;
    /**
     * Backend has lost the connection to hubble-relay and is reconnecting now
     *
     * @generated from protobuf field: bool relay_reconnecting = 2;
     */
    relayReconnecting: boolean;
    /**
     * Backend has lost the connection to kubernetes and is reconnecting
     *
     * @generated from protobuf field: bool k8s_unavailable = 3 [json_name = "k8sUnavailable"];
     */
    k8SUnavailable: boolean;
    /**
     * Backend has established connection to k8s
     *
     * @generated from protobuf field: bool k8s_connected = 4 [json_name = "k8sConnected"];
     */
    k8SConnected: boolean;
}
/**
 * @generated from protobuf message ui.DataState
 */
export interface DataState {
    /**
     * No pods in selected namespace
     *
     * @generated from protobuf field: bool no_activity = 1;
     */
    noActivity: boolean;
}
/**
 * @generated from protobuf message ui.NoPermission
 */
export interface NoPermission {
    /**
     * @generated from protobuf field: string resource = 1;
     */
    resource: string;
    /**
     * @generated from protobuf field: string error = 2;
     */
    error: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Notification$Type extends MessageType<Notification> {
    constructor() {
        super("ui.Notification", [
            { no: 1, name: "conn_state", kind: "message", oneof: "notification", T: () => ConnectionState },
            { no: 2, name: "data_state", kind: "message", oneof: "notification", T: () => DataState },
            { no: 3, name: "status", kind: "message", oneof: "notification", T: () => GetStatusResponse },
            { no: 4, name: "no_permission", kind: "message", oneof: "notification", T: () => NoPermission }
        ]);
    }
    create(value?: PartialMessage<Notification>): Notification {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notification = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Notification>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Notification): Notification {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ui.ConnectionState conn_state */ 1:
                    message.notification = {
                        oneofKind: "connState",
                        connState: ConnectionState.internalBinaryRead(reader, reader.uint32(), options, (message.notification as any).connState)
                    };
                    break;
                case /* ui.DataState data_state */ 2:
                    message.notification = {
                        oneofKind: "dataState",
                        dataState: DataState.internalBinaryRead(reader, reader.uint32(), options, (message.notification as any).dataState)
                    };
                    break;
                case /* ui.GetStatusResponse status */ 3:
                    message.notification = {
                        oneofKind: "status",
                        status: GetStatusResponse.internalBinaryRead(reader, reader.uint32(), options, (message.notification as any).status)
                    };
                    break;
                case /* ui.NoPermission no_permission */ 4:
                    message.notification = {
                        oneofKind: "noPermission",
                        noPermission: NoPermission.internalBinaryRead(reader, reader.uint32(), options, (message.notification as any).noPermission)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Notification, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ui.ConnectionState conn_state = 1; */
        if (message.notification.oneofKind === "connState")
            ConnectionState.internalBinaryWrite(message.notification.connState, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ui.DataState data_state = 2; */
        if (message.notification.oneofKind === "dataState")
            DataState.internalBinaryWrite(message.notification.dataState, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ui.GetStatusResponse status = 3; */
        if (message.notification.oneofKind === "status")
            GetStatusResponse.internalBinaryWrite(message.notification.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ui.NoPermission no_permission = 4; */
        if (message.notification.oneofKind === "noPermission")
            NoPermission.internalBinaryWrite(message.notification.noPermission, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ui.Notification
 */
export const Notification = new Notification$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectionState$Type extends MessageType<ConnectionState> {
    constructor() {
        super("ui.ConnectionState", [
            { no: 1, name: "relay_connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "relay_reconnecting", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "k8s_unavailable", kind: "scalar", jsonName: "k8sUnavailable", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "k8s_connected", kind: "scalar", jsonName: "k8sConnected", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectionState>): ConnectionState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.relayConnected = false;
        message.relayReconnecting = false;
        message.k8SUnavailable = false;
        message.k8SConnected = false;
        if (value !== undefined)
            reflectionMergePartial<ConnectionState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectionState): ConnectionState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool relay_connected */ 1:
                    message.relayConnected = reader.bool();
                    break;
                case /* bool relay_reconnecting */ 2:
                    message.relayReconnecting = reader.bool();
                    break;
                case /* bool k8s_unavailable = 3 [json_name = "k8sUnavailable"];*/ 3:
                    message.k8SUnavailable = reader.bool();
                    break;
                case /* bool k8s_connected = 4 [json_name = "k8sConnected"];*/ 4:
                    message.k8SConnected = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectionState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool relay_connected = 1; */
        if (message.relayConnected !== false)
            writer.tag(1, WireType.Varint).bool(message.relayConnected);
        /* bool relay_reconnecting = 2; */
        if (message.relayReconnecting !== false)
            writer.tag(2, WireType.Varint).bool(message.relayReconnecting);
        /* bool k8s_unavailable = 3 [json_name = "k8sUnavailable"]; */
        if (message.k8SUnavailable !== false)
            writer.tag(3, WireType.Varint).bool(message.k8SUnavailable);
        /* bool k8s_connected = 4 [json_name = "k8sConnected"]; */
        if (message.k8SConnected !== false)
            writer.tag(4, WireType.Varint).bool(message.k8SConnected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ui.ConnectionState
 */
export const ConnectionState = new ConnectionState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DataState$Type extends MessageType<DataState> {
    constructor() {
        super("ui.DataState", [
            { no: 1, name: "no_activity", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DataState>): DataState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.noActivity = false;
        if (value !== undefined)
            reflectionMergePartial<DataState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DataState): DataState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool no_activity */ 1:
                    message.noActivity = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DataState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool no_activity = 1; */
        if (message.noActivity !== false)
            writer.tag(1, WireType.Varint).bool(message.noActivity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ui.DataState
 */
export const DataState = new DataState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoPermission$Type extends MessageType<NoPermission> {
    constructor() {
        super("ui.NoPermission", [
            { no: 1, name: "resource", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NoPermission>): NoPermission {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resource = "";
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<NoPermission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NoPermission): NoPermission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string resource */ 1:
                    message.resource = reader.string();
                    break;
                case /* string error */ 2:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NoPermission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string resource = 1; */
        if (message.resource !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.resource);
        /* string error = 2; */
        if (message.error !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ui.NoPermission
 */
export const NoPermission = new NoPermission$Type();
