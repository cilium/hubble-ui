// Copyright 2020 Authors of Cilium
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

import "flow/flow.proto";
import "ui/notifications.proto";
import "ui/status.proto";

package ui;

service UI {
    rpc GetEvents(GetEventsRequest) returns (stream GetEventsResponse) {}
    rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}
    rpc GetControlStream(GetControlStreamRequest) returns (
        stream GetControlStreamResponse
    );
}

// Here I didn't include "follow", "until", and "number". This request assumes follow,
// and lets the client decide when to end the request, whether it's based on timestamp
// or the number of responses received.
message GetEventsRequest{
    // EventType specifies which types of events to subscribe to. If unspecified, the
    // request is subscribed to all the event types.
    repeated EventType event_types = 1;
    repeated EventFilter blacklist = 2;
    repeated EventFilter whitelist = 3;
    google.protobuf.Timestamp since = 4;
    GetStatusRequest status_request = 5;
}

message GetEventsResponse {
  string node = 1;
  google.protobuf.Timestamp timestamp = 2;

  repeated Event events = 3;
}

message Event {
  oneof event {
    flow.Flow flow = 3;
    NamespaceState namespace_state = 4;
    ServiceState service_state = 5;
    // It's unclear how we can define what it means for service links to get
    // added/deleted. For now I'm deferring the decision for whether a
    // particular link should be included in the service map to the client.
    // Maybe the server can periodically send service_link events for active
    // links to keep-alive, and the client can expire older links based on their
    // timestamp.
    ServiceLinkState service_link_state = 6;
    Flows flows = 7;
    Notification notification = 8;
  }
}

message Flows {
    repeated flow.Flow flows = 1;
}

// Here I added different filter types for different events. Another option is to reuse
// and extend FlowFilter to filter all the events, but I worry that it might become too
// confusing in terms of figuring out which filter fields apply to which events.
message EventFilter {
    oneof filter {
        flow.FlowFilter flow_filter = 2;
        ServiceFilter service_filter = 3;
        ServiceLinkFilter service_link_filter = 4;
    }
}

enum EventType {
    UNKNOWN_EVENT = 0;
    FLOW = 1;
    K8S_NAMESPACE_STATE = 2;
    SERVICE_STATE = 3;
    SERVICE_LINK_STATE = 4;
    FLOWS = 5;
    STATUS = 6;
}

message NamespaceDescriptor {
  string id = 1;
  string name = 2;
  google.protobuf.Timestamp creation_timestamp = 3;
}

message NamespaceState {
  NamespaceDescriptor namespace = 1;
  StateChange type = 2;
}

// IP protocols. The values of enums do not correspond to actual IP protocol numbers.
enum IPProtocol {
    UNKNOWN_IP_PROTOCOL = 0;
    TCP = 1;
    UDP = 2;
    ICMP_V4 = 3;
    ICMP_V6 = 4;
}

// Come up with a better name for Service.
message Service {
    // An opaque ID that uniquely identifies the service.
    string id = 1;
    string name = 2;
    string namespace = 3;
    repeated string labels = 4;
    repeated string dns_names = 5;
    bool egress_policy_enforced = 6;
    bool ingress_policy_enforced = 7;
    // This is a string instead of boolean because Cilium reports status message. If it's
    // successfully enabled, this string is set to "OK" I think.
    string visibility_policy_status = 8;
    // We probably can't reliably set creation timestamp.
    google.protobuf.Timestamp creation_timestamp = 9;
    repeated flow.Workload workloads = 10;
    uint32 identity = 12;
}

message ServiceState {
    Service service = 1;
    StateChange type = 2;
}

message ServiceFilter {
    repeated string namespace = 1;
}

message ServiceLink {
    // An opaque ID that uniquely identifies this link.
    string id = 1;
    // source Service id
    string source_id = 2;
    // destination Service id
    string destination_id = 3;
    uint32 destination_port = 4;
    IPProtocol ip_protocol = 5;
    flow.Verdict verdict = 6;

    uint64 flow_amount = 7;
    Latency latency = 8;
    uint64 bytes_transfered = 9;

    flow.AuthType auth_type = 10;
    bool is_encrypted = 11;

    message Latency {
        google.protobuf.Duration min = 1;
        google.protobuf.Duration max = 2;
        google.protobuf.Duration avg = 3;
    }
}

message ServiceLinkState {
    ServiceLink service_link = 1;
    StateChange type = 2;
}

message ServiceLinkFilter {
    repeated ServiceFilter source = 1;
    repeated ServiceFilter destination = 2;
    // Use string here to support things like port ranges (e.g. 100-200).
    repeated string destination_port = 3;
    repeated flow.Verdict verdict = 4;
}

enum StateChange {
    UNKNOWN_STATE_CHANGE = 0;
    ADDED = 1;
    MODIFIED = 2;
    DELETED = 3;
    // This is needed in case the relay server knows that the service exists,
    // but it doesn't know when it got created.
    EXISTS = 4;
}

message GetControlStreamRequest {}
message GetControlStreamResponse {
    oneof event {
        NamespaceStates namespaces = 1;
        Notification notification = 2;
    }

    message NamespaceStates {
        repeated NamespaceState namespaces = 1;
    }
}
