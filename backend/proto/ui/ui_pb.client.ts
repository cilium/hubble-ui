/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,eslint_disable,ts_nocheck,generate_dependencies,long_type_number
// @generated from protobuf file "ui/ui.proto" (package "ui", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2020 Authors of Cilium
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UI } from "./ui_pb";
import type { GetControlStreamResponse } from "./ui_pb";
import type { GetControlStreamRequest } from "./ui_pb";
import type { GetStatusResponse } from "./status_pb";
import type { GetStatusRequest } from "./status_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetEventsResponse } from "./ui_pb";
import type { GetEventsRequest } from "./ui_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service ui.UI
 */
export interface IUIClient {
    /**
     * @generated from protobuf rpc: GetEvents(ui.GetEventsRequest) returns (stream ui.GetEventsResponse);
     */
    getEvents(input: GetEventsRequest, options?: RpcOptions): ServerStreamingCall<GetEventsRequest, GetEventsResponse>;
    /**
     * @generated from protobuf rpc: GetStatus(ui.GetStatusRequest) returns (ui.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse>;
    /**
     * @generated from protobuf rpc: GetControlStream(ui.GetControlStreamRequest) returns (stream ui.GetControlStreamResponse);
     */
    getControlStream(input: GetControlStreamRequest, options?: RpcOptions): ServerStreamingCall<GetControlStreamRequest, GetControlStreamResponse>;
}
/**
 * @generated from protobuf service ui.UI
 */
export class UIClient implements IUIClient, ServiceInfo {
    typeName = UI.typeName;
    methods = UI.methods;
    options = UI.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetEvents(ui.GetEventsRequest) returns (stream ui.GetEventsResponse);
     */
    getEvents(input: GetEventsRequest, options?: RpcOptions): ServerStreamingCall<GetEventsRequest, GetEventsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEventsRequest, GetEventsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetStatus(ui.GetStatusRequest) returns (ui.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusRequest, GetStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetControlStream(ui.GetControlStreamRequest) returns (stream ui.GetControlStreamResponse);
     */
    getControlStream(input: GetControlStreamRequest, options?: RpcOptions): ServerStreamingCall<GetControlStreamRequest, GetControlStreamResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetControlStreamRequest, GetControlStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
