/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,eslint_disable,ts_nocheck,generate_dependencies,long_type_number
// @generated from protobuf file "observer/observer.proto" (package "observer", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Hubble
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Observer } from "./observer_pb";
import type { ServerStatusResponse } from "./observer_pb";
import type { ServerStatusRequest } from "./observer_pb";
import type { GetNamespacesResponse } from "./observer_pb";
import type { GetNamespacesRequest } from "./observer_pb";
import type { GetNodesResponse } from "./observer_pb";
import type { GetNodesRequest } from "./observer_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { GetDebugEventsResponse } from "./observer_pb";
import type { GetDebugEventsRequest } from "./observer_pb";
import type { GetAgentEventsResponse } from "./observer_pb";
import type { GetAgentEventsRequest } from "./observer_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetFlowsResponse } from "./observer_pb";
import type { GetFlowsRequest } from "./observer_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Observer returns a stream of Flows depending on which filter the user want
 * to observe.
 *
 * @generated from protobuf service observer.Observer
 */
export interface IObserverClient {
    /**
     * GetFlows returning structured data, meant to eventually obsolete GetLastNFlows.
     *
     * @generated from protobuf rpc: GetFlows(observer.GetFlowsRequest) returns (stream observer.GetFlowsResponse);
     */
    getFlows(input: GetFlowsRequest, options?: RpcOptions): ServerStreamingCall<GetFlowsRequest, GetFlowsResponse>;
    /**
     * GetAgentEvents returns Cilium agent events.
     *
     * @generated from protobuf rpc: GetAgentEvents(observer.GetAgentEventsRequest) returns (stream observer.GetAgentEventsResponse);
     */
    getAgentEvents(input: GetAgentEventsRequest, options?: RpcOptions): ServerStreamingCall<GetAgentEventsRequest, GetAgentEventsResponse>;
    /**
     * GetDebugEvents returns Cilium datapath debug events.
     *
     * @generated from protobuf rpc: GetDebugEvents(observer.GetDebugEventsRequest) returns (stream observer.GetDebugEventsResponse);
     */
    getDebugEvents(input: GetDebugEventsRequest, options?: RpcOptions): ServerStreamingCall<GetDebugEventsRequest, GetDebugEventsResponse>;
    /**
     * GetNodes returns information about nodes in a cluster.
     *
     * @generated from protobuf rpc: GetNodes(observer.GetNodesRequest) returns (observer.GetNodesResponse);
     */
    getNodes(input: GetNodesRequest, options?: RpcOptions): UnaryCall<GetNodesRequest, GetNodesResponse>;
    /**
     * GetNamespaces returns information about namespaces in a cluster.
     * The namespaces returned are namespaces which have had network flows in
     * the last hour. The namespaces are returned sorted by cluster name and
     * namespace in ascending order.
     *
     * @generated from protobuf rpc: GetNamespaces(observer.GetNamespacesRequest) returns (observer.GetNamespacesResponse);
     */
    getNamespaces(input: GetNamespacesRequest, options?: RpcOptions): UnaryCall<GetNamespacesRequest, GetNamespacesResponse>;
    /**
     * ServerStatus returns some details about the running hubble server.
     *
     * @generated from protobuf rpc: ServerStatus(observer.ServerStatusRequest) returns (observer.ServerStatusResponse);
     */
    serverStatus(input: ServerStatusRequest, options?: RpcOptions): UnaryCall<ServerStatusRequest, ServerStatusResponse>;
}
/**
 * Observer returns a stream of Flows depending on which filter the user want
 * to observe.
 *
 * @generated from protobuf service observer.Observer
 */
export class ObserverClient implements IObserverClient, ServiceInfo {
    typeName = Observer.typeName;
    methods = Observer.methods;
    options = Observer.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GetFlows returning structured data, meant to eventually obsolete GetLastNFlows.
     *
     * @generated from protobuf rpc: GetFlows(observer.GetFlowsRequest) returns (stream observer.GetFlowsResponse);
     */
    getFlows(input: GetFlowsRequest, options?: RpcOptions): ServerStreamingCall<GetFlowsRequest, GetFlowsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFlowsRequest, GetFlowsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * GetAgentEvents returns Cilium agent events.
     *
     * @generated from protobuf rpc: GetAgentEvents(observer.GetAgentEventsRequest) returns (stream observer.GetAgentEventsResponse);
     */
    getAgentEvents(input: GetAgentEventsRequest, options?: RpcOptions): ServerStreamingCall<GetAgentEventsRequest, GetAgentEventsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAgentEventsRequest, GetAgentEventsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * GetDebugEvents returns Cilium datapath debug events.
     *
     * @generated from protobuf rpc: GetDebugEvents(observer.GetDebugEventsRequest) returns (stream observer.GetDebugEventsResponse);
     */
    getDebugEvents(input: GetDebugEventsRequest, options?: RpcOptions): ServerStreamingCall<GetDebugEventsRequest, GetDebugEventsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDebugEventsRequest, GetDebugEventsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * GetNodes returns information about nodes in a cluster.
     *
     * @generated from protobuf rpc: GetNodes(observer.GetNodesRequest) returns (observer.GetNodesResponse);
     */
    getNodes(input: GetNodesRequest, options?: RpcOptions): UnaryCall<GetNodesRequest, GetNodesResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetNodesRequest, GetNodesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetNamespaces returns information about namespaces in a cluster.
     * The namespaces returned are namespaces which have had network flows in
     * the last hour. The namespaces are returned sorted by cluster name and
     * namespace in ascending order.
     *
     * @generated from protobuf rpc: GetNamespaces(observer.GetNamespacesRequest) returns (observer.GetNamespacesResponse);
     */
    getNamespaces(input: GetNamespacesRequest, options?: RpcOptions): UnaryCall<GetNamespacesRequest, GetNamespacesResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetNamespacesRequest, GetNamespacesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ServerStatus returns some details about the running hubble server.
     *
     * @generated from protobuf rpc: ServerStatus(observer.ServerStatusRequest) returns (observer.ServerStatusResponse);
     */
    serverStatus(input: ServerStatusRequest, options?: RpcOptions): UnaryCall<ServerStatusRequest, ServerStatusResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServerStatusRequest, ServerStatusResponse>("unary", this._transport, method, opt, input);
    }
}
