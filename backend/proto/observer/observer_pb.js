// source: observer/observer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.object.extend(proto, google_protobuf_field_mask_pb);
var flow_flow_pb = require('../flow/flow_pb.js');
goog.object.extend(proto, flow_flow_pb);
var relay_relay_pb = require('../relay/relay_pb.js');
goog.object.extend(proto, relay_relay_pb);
goog.exportSymbol('proto.observer.ExportEvent', null, global);
goog.exportSymbol('proto.observer.ExportEvent.ResponseTypesCase', null, global);
goog.exportSymbol('proto.observer.GetAgentEventsRequest', null, global);
goog.exportSymbol('proto.observer.GetAgentEventsResponse', null, global);
goog.exportSymbol('proto.observer.GetDebugEventsRequest', null, global);
goog.exportSymbol('proto.observer.GetDebugEventsResponse', null, global);
goog.exportSymbol('proto.observer.GetFlowsRequest', null, global);
goog.exportSymbol('proto.observer.GetFlowsRequest.Experimental', null, global);
goog.exportSymbol('proto.observer.GetFlowsResponse', null, global);
goog.exportSymbol('proto.observer.GetFlowsResponse.ResponseTypesCase', null, global);
goog.exportSymbol('proto.observer.GetNamespacesRequest', null, global);
goog.exportSymbol('proto.observer.GetNamespacesResponse', null, global);
goog.exportSymbol('proto.observer.GetNodesRequest', null, global);
goog.exportSymbol('proto.observer.GetNodesResponse', null, global);
goog.exportSymbol('proto.observer.Namespace', null, global);
goog.exportSymbol('proto.observer.Node', null, global);
goog.exportSymbol('proto.observer.ServerStatusRequest', null, global);
goog.exportSymbol('proto.observer.ServerStatusResponse', null, global);
goog.exportSymbol('proto.observer.TLS', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.ServerStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.observer.ServerStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.ServerStatusRequest.displayName = 'proto.observer.ServerStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.ServerStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.observer.ServerStatusResponse.repeatedFields_, null);
};
goog.inherits(proto.observer.ServerStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.ServerStatusResponse.displayName = 'proto.observer.ServerStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.GetFlowsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.observer.GetFlowsRequest.repeatedFields_, null);
};
goog.inherits(proto.observer.GetFlowsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.GetFlowsRequest.displayName = 'proto.observer.GetFlowsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.GetFlowsRequest.Experimental = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.observer.GetFlowsRequest.Experimental, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.GetFlowsRequest.Experimental.displayName = 'proto.observer.GetFlowsRequest.Experimental';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.GetFlowsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.observer.GetFlowsResponse.oneofGroups_);
};
goog.inherits(proto.observer.GetFlowsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.GetFlowsResponse.displayName = 'proto.observer.GetFlowsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.GetAgentEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.observer.GetAgentEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.GetAgentEventsRequest.displayName = 'proto.observer.GetAgentEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.GetAgentEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.observer.GetAgentEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.GetAgentEventsResponse.displayName = 'proto.observer.GetAgentEventsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.GetDebugEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.observer.GetDebugEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.GetDebugEventsRequest.displayName = 'proto.observer.GetDebugEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.GetDebugEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.observer.GetDebugEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.GetDebugEventsResponse.displayName = 'proto.observer.GetDebugEventsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.GetNodesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.observer.GetNodesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.GetNodesRequest.displayName = 'proto.observer.GetNodesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.GetNodesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.observer.GetNodesResponse.repeatedFields_, null);
};
goog.inherits(proto.observer.GetNodesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.GetNodesResponse.displayName = 'proto.observer.GetNodesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.observer.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.Node.displayName = 'proto.observer.Node';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.TLS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.observer.TLS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.TLS.displayName = 'proto.observer.TLS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.GetNamespacesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.observer.GetNamespacesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.GetNamespacesRequest.displayName = 'proto.observer.GetNamespacesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.GetNamespacesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.observer.GetNamespacesResponse.repeatedFields_, null);
};
goog.inherits(proto.observer.GetNamespacesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.GetNamespacesResponse.displayName = 'proto.observer.GetNamespacesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.Namespace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.observer.Namespace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.Namespace.displayName = 'proto.observer.Namespace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observer.ExportEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.observer.ExportEvent.oneofGroups_);
};
goog.inherits(proto.observer.ExportEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observer.ExportEvent.displayName = 'proto.observer.ExportEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.ServerStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.ServerStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.ServerStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.ServerStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.ServerStatusRequest}
 */
proto.observer.ServerStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.ServerStatusRequest;
  return proto.observer.ServerStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.ServerStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.ServerStatusRequest}
 */
proto.observer.ServerStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.ServerStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.ServerStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.ServerStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.ServerStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.observer.ServerStatusResponse.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.ServerStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.ServerStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.ServerStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.ServerStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    numFlows: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxFlows: jspb.Message.getFieldWithDefault(msg, 2, 0),
    seenFlows: jspb.Message.getFieldWithDefault(msg, 3, 0),
    uptimeNs: jspb.Message.getFieldWithDefault(msg, 4, 0),
    numConnectedNodes: (f = msg.getNumConnectedNodes()) && google_protobuf_wrappers_pb.UInt32Value.toObject(includeInstance, f),
    numUnavailableNodes: (f = msg.getNumUnavailableNodes()) && google_protobuf_wrappers_pb.UInt32Value.toObject(includeInstance, f),
    unavailableNodesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    version: jspb.Message.getFieldWithDefault(msg, 8, ""),
    flowsRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.ServerStatusResponse}
 */
proto.observer.ServerStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.ServerStatusResponse;
  return proto.observer.ServerStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.ServerStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.ServerStatusResponse}
 */
proto.observer.ServerStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumFlows(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxFlows(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeenFlows(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUptimeNs(value);
      break;
    case 5:
      var value = new google_protobuf_wrappers_pb.UInt32Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt32Value.deserializeBinaryFromReader);
      msg.setNumConnectedNodes(value);
      break;
    case 6:
      var value = new google_protobuf_wrappers_pb.UInt32Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt32Value.deserializeBinaryFromReader);
      msg.setNumUnavailableNodes(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addUnavailableNodes(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFlowsRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.ServerStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.ServerStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.ServerStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.ServerStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumFlows();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMaxFlows();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSeenFlows();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getUptimeNs();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getNumConnectedNodes();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_wrappers_pb.UInt32Value.serializeBinaryToWriter
    );
  }
  f = message.getNumUnavailableNodes();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_wrappers_pb.UInt32Value.serializeBinaryToWriter
    );
  }
  f = message.getUnavailableNodesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getFlowsRate();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * optional uint64 num_flows = 1;
 * @return {number}
 */
proto.observer.ServerStatusResponse.prototype.getNumFlows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.observer.ServerStatusResponse} returns this
 */
proto.observer.ServerStatusResponse.prototype.setNumFlows = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 max_flows = 2;
 * @return {number}
 */
proto.observer.ServerStatusResponse.prototype.getMaxFlows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.observer.ServerStatusResponse} returns this
 */
proto.observer.ServerStatusResponse.prototype.setMaxFlows = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 seen_flows = 3;
 * @return {number}
 */
proto.observer.ServerStatusResponse.prototype.getSeenFlows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.observer.ServerStatusResponse} returns this
 */
proto.observer.ServerStatusResponse.prototype.setSeenFlows = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 uptime_ns = 4;
 * @return {number}
 */
proto.observer.ServerStatusResponse.prototype.getUptimeNs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.observer.ServerStatusResponse} returns this
 */
proto.observer.ServerStatusResponse.prototype.setUptimeNs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional google.protobuf.UInt32Value num_connected_nodes = 5;
 * @return {?proto.google.protobuf.UInt32Value}
 */
proto.observer.ServerStatusResponse.prototype.getNumConnectedNodes = function() {
  return /** @type{?proto.google.protobuf.UInt32Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt32Value, 5));
};


/**
 * @param {?proto.google.protobuf.UInt32Value|undefined} value
 * @return {!proto.observer.ServerStatusResponse} returns this
*/
proto.observer.ServerStatusResponse.prototype.setNumConnectedNodes = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.ServerStatusResponse} returns this
 */
proto.observer.ServerStatusResponse.prototype.clearNumConnectedNodes = function() {
  return this.setNumConnectedNodes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.ServerStatusResponse.prototype.hasNumConnectedNodes = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.UInt32Value num_unavailable_nodes = 6;
 * @return {?proto.google.protobuf.UInt32Value}
 */
proto.observer.ServerStatusResponse.prototype.getNumUnavailableNodes = function() {
  return /** @type{?proto.google.protobuf.UInt32Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt32Value, 6));
};


/**
 * @param {?proto.google.protobuf.UInt32Value|undefined} value
 * @return {!proto.observer.ServerStatusResponse} returns this
*/
proto.observer.ServerStatusResponse.prototype.setNumUnavailableNodes = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.ServerStatusResponse} returns this
 */
proto.observer.ServerStatusResponse.prototype.clearNumUnavailableNodes = function() {
  return this.setNumUnavailableNodes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.ServerStatusResponse.prototype.hasNumUnavailableNodes = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string unavailable_nodes = 7;
 * @return {!Array<string>}
 */
proto.observer.ServerStatusResponse.prototype.getUnavailableNodesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.observer.ServerStatusResponse} returns this
 */
proto.observer.ServerStatusResponse.prototype.setUnavailableNodesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.observer.ServerStatusResponse} returns this
 */
proto.observer.ServerStatusResponse.prototype.addUnavailableNodes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.observer.ServerStatusResponse} returns this
 */
proto.observer.ServerStatusResponse.prototype.clearUnavailableNodesList = function() {
  return this.setUnavailableNodesList([]);
};


/**
 * optional string version = 8;
 * @return {string}
 */
proto.observer.ServerStatusResponse.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.observer.ServerStatusResponse} returns this
 */
proto.observer.ServerStatusResponse.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional double flows_rate = 9;
 * @return {number}
 */
proto.observer.ServerStatusResponse.prototype.getFlowsRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.observer.ServerStatusResponse} returns this
 */
proto.observer.ServerStatusResponse.prototype.setFlowsRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.observer.GetFlowsRequest.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.GetFlowsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.GetFlowsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.GetFlowsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetFlowsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    first: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    follow: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    blacklistList: jspb.Message.toObjectList(msg.getBlacklistList(),
    flow_flow_pb.FlowFilter.toObject, includeInstance),
    whitelistList: jspb.Message.toObjectList(msg.getWhitelistList(),
    flow_flow_pb.FlowFilter.toObject, includeInstance),
    since: (f = msg.getSince()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    until: (f = msg.getUntil()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    experimental: (f = msg.getExperimental()) && proto.observer.GetFlowsRequest.Experimental.toObject(includeInstance, f),
    extensions: (f = msg.getExtensions()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.GetFlowsRequest}
 */
proto.observer.GetFlowsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.GetFlowsRequest;
  return proto.observer.GetFlowsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.GetFlowsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.GetFlowsRequest}
 */
proto.observer.GetFlowsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumber(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFirst(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFollow(value);
      break;
    case 5:
      var value = new flow_flow_pb.FlowFilter;
      reader.readMessage(value,flow_flow_pb.FlowFilter.deserializeBinaryFromReader);
      msg.addBlacklist(value);
      break;
    case 6:
      var value = new flow_flow_pb.FlowFilter;
      reader.readMessage(value,flow_flow_pb.FlowFilter.deserializeBinaryFromReader);
      msg.addWhitelist(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setSince(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUntil(value);
      break;
    case 999:
      var value = new proto.observer.GetFlowsRequest.Experimental;
      reader.readMessage(value,proto.observer.GetFlowsRequest.Experimental.deserializeBinaryFromReader);
      msg.setExperimental(value);
      break;
    case 150000:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setExtensions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.GetFlowsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.GetFlowsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.GetFlowsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetFlowsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFirst();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getFollow();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getBlacklistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      flow_flow_pb.FlowFilter.serializeBinaryToWriter
    );
  }
  f = message.getWhitelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      flow_flow_pb.FlowFilter.serializeBinaryToWriter
    );
  }
  f = message.getSince();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUntil();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getExperimental();
  if (f != null) {
    writer.writeMessage(
      999,
      f,
      proto.observer.GetFlowsRequest.Experimental.serializeBinaryToWriter
    );
  }
  f = message.getExtensions();
  if (f != null) {
    writer.writeMessage(
      150000,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.GetFlowsRequest.Experimental.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.GetFlowsRequest.Experimental.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.GetFlowsRequest.Experimental} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetFlowsRequest.Experimental.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldMask: (f = msg.getFieldMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.GetFlowsRequest.Experimental}
 */
proto.observer.GetFlowsRequest.Experimental.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.GetFlowsRequest.Experimental;
  return proto.observer.GetFlowsRequest.Experimental.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.GetFlowsRequest.Experimental} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.GetFlowsRequest.Experimental}
 */
proto.observer.GetFlowsRequest.Experimental.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setFieldMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.GetFlowsRequest.Experimental.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.GetFlowsRequest.Experimental.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.GetFlowsRequest.Experimental} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetFlowsRequest.Experimental.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldMask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.FieldMask field_mask = 1;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.observer.GetFlowsRequest.Experimental.prototype.getFieldMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 1));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.observer.GetFlowsRequest.Experimental} returns this
*/
proto.observer.GetFlowsRequest.Experimental.prototype.setFieldMask = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetFlowsRequest.Experimental} returns this
 */
proto.observer.GetFlowsRequest.Experimental.prototype.clearFieldMask = function() {
  return this.setFieldMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetFlowsRequest.Experimental.prototype.hasFieldMask = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 number = 1;
 * @return {number}
 */
proto.observer.GetFlowsRequest.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.observer.GetFlowsRequest} returns this
 */
proto.observer.GetFlowsRequest.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool first = 9;
 * @return {boolean}
 */
proto.observer.GetFlowsRequest.prototype.getFirst = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.observer.GetFlowsRequest} returns this
 */
proto.observer.GetFlowsRequest.prototype.setFirst = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool follow = 3;
 * @return {boolean}
 */
proto.observer.GetFlowsRequest.prototype.getFollow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.observer.GetFlowsRequest} returns this
 */
proto.observer.GetFlowsRequest.prototype.setFollow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated flow.FlowFilter blacklist = 5;
 * @return {!Array<!proto.flow.FlowFilter>}
 */
proto.observer.GetFlowsRequest.prototype.getBlacklistList = function() {
  return /** @type{!Array<!proto.flow.FlowFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, flow_flow_pb.FlowFilter, 5));
};


/**
 * @param {!Array<!proto.flow.FlowFilter>} value
 * @return {!proto.observer.GetFlowsRequest} returns this
*/
proto.observer.GetFlowsRequest.prototype.setBlacklistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.flow.FlowFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter}
 */
proto.observer.GetFlowsRequest.prototype.addBlacklist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.flow.FlowFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.observer.GetFlowsRequest} returns this
 */
proto.observer.GetFlowsRequest.prototype.clearBlacklistList = function() {
  return this.setBlacklistList([]);
};


/**
 * repeated flow.FlowFilter whitelist = 6;
 * @return {!Array<!proto.flow.FlowFilter>}
 */
proto.observer.GetFlowsRequest.prototype.getWhitelistList = function() {
  return /** @type{!Array<!proto.flow.FlowFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, flow_flow_pb.FlowFilter, 6));
};


/**
 * @param {!Array<!proto.flow.FlowFilter>} value
 * @return {!proto.observer.GetFlowsRequest} returns this
*/
proto.observer.GetFlowsRequest.prototype.setWhitelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.flow.FlowFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter}
 */
proto.observer.GetFlowsRequest.prototype.addWhitelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.flow.FlowFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.observer.GetFlowsRequest} returns this
 */
proto.observer.GetFlowsRequest.prototype.clearWhitelistList = function() {
  return this.setWhitelistList([]);
};


/**
 * optional google.protobuf.Timestamp since = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.observer.GetFlowsRequest.prototype.getSince = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.observer.GetFlowsRequest} returns this
*/
proto.observer.GetFlowsRequest.prototype.setSince = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetFlowsRequest} returns this
 */
proto.observer.GetFlowsRequest.prototype.clearSince = function() {
  return this.setSince(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetFlowsRequest.prototype.hasSince = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional google.protobuf.Timestamp until = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.observer.GetFlowsRequest.prototype.getUntil = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.observer.GetFlowsRequest} returns this
*/
proto.observer.GetFlowsRequest.prototype.setUntil = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetFlowsRequest} returns this
 */
proto.observer.GetFlowsRequest.prototype.clearUntil = function() {
  return this.setUntil(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetFlowsRequest.prototype.hasUntil = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Experimental experimental = 999;
 * @return {?proto.observer.GetFlowsRequest.Experimental}
 */
proto.observer.GetFlowsRequest.prototype.getExperimental = function() {
  return /** @type{?proto.observer.GetFlowsRequest.Experimental} */ (
    jspb.Message.getWrapperField(this, proto.observer.GetFlowsRequest.Experimental, 999));
};


/**
 * @param {?proto.observer.GetFlowsRequest.Experimental|undefined} value
 * @return {!proto.observer.GetFlowsRequest} returns this
*/
proto.observer.GetFlowsRequest.prototype.setExperimental = function(value) {
  return jspb.Message.setWrapperField(this, 999, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetFlowsRequest} returns this
 */
proto.observer.GetFlowsRequest.prototype.clearExperimental = function() {
  return this.setExperimental(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetFlowsRequest.prototype.hasExperimental = function() {
  return jspb.Message.getField(this, 999) != null;
};


/**
 * optional google.protobuf.Any extensions = 150000;
 * @return {?proto.google.protobuf.Any}
 */
proto.observer.GetFlowsRequest.prototype.getExtensions = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 150000));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.observer.GetFlowsRequest} returns this
*/
proto.observer.GetFlowsRequest.prototype.setExtensions = function(value) {
  return jspb.Message.setWrapperField(this, 150000, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetFlowsRequest} returns this
 */
proto.observer.GetFlowsRequest.prototype.clearExtensions = function() {
  return this.setExtensions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetFlowsRequest.prototype.hasExtensions = function() {
  return jspb.Message.getField(this, 150000) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.observer.GetFlowsResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.observer.GetFlowsResponse.ResponseTypesCase = {
  RESPONSE_TYPES_NOT_SET: 0,
  FLOW: 1,
  NODE_STATUS: 2,
  LOST_EVENTS: 3
};

/**
 * @return {proto.observer.GetFlowsResponse.ResponseTypesCase}
 */
proto.observer.GetFlowsResponse.prototype.getResponseTypesCase = function() {
  return /** @type {proto.observer.GetFlowsResponse.ResponseTypesCase} */(jspb.Message.computeOneofCase(this, proto.observer.GetFlowsResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.GetFlowsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.GetFlowsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.GetFlowsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetFlowsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    flow: (f = msg.getFlow()) && flow_flow_pb.Flow.toObject(includeInstance, f),
    nodeStatus: (f = msg.getNodeStatus()) && relay_relay_pb.NodeStatusEvent.toObject(includeInstance, f),
    lostEvents: (f = msg.getLostEvents()) && flow_flow_pb.LostEvent.toObject(includeInstance, f),
    nodeName: jspb.Message.getFieldWithDefault(msg, 1000, ""),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.GetFlowsResponse}
 */
proto.observer.GetFlowsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.GetFlowsResponse;
  return proto.observer.GetFlowsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.GetFlowsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.GetFlowsResponse}
 */
proto.observer.GetFlowsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new flow_flow_pb.Flow;
      reader.readMessage(value,flow_flow_pb.Flow.deserializeBinaryFromReader);
      msg.setFlow(value);
      break;
    case 2:
      var value = new relay_relay_pb.NodeStatusEvent;
      reader.readMessage(value,relay_relay_pb.NodeStatusEvent.deserializeBinaryFromReader);
      msg.setNodeStatus(value);
      break;
    case 3:
      var value = new flow_flow_pb.LostEvent;
      reader.readMessage(value,flow_flow_pb.LostEvent.deserializeBinaryFromReader);
      msg.setLostEvents(value);
      break;
    case 1000:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    case 1001:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.GetFlowsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.GetFlowsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.GetFlowsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetFlowsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlow();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      flow_flow_pb.Flow.serializeBinaryToWriter
    );
  }
  f = message.getNodeStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      relay_relay_pb.NodeStatusEvent.serializeBinaryToWriter
    );
  }
  f = message.getLostEvents();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      flow_flow_pb.LostEvent.serializeBinaryToWriter
    );
  }
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      1000,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional flow.Flow flow = 1;
 * @return {?proto.flow.Flow}
 */
proto.observer.GetFlowsResponse.prototype.getFlow = function() {
  return /** @type{?proto.flow.Flow} */ (
    jspb.Message.getWrapperField(this, flow_flow_pb.Flow, 1));
};


/**
 * @param {?proto.flow.Flow|undefined} value
 * @return {!proto.observer.GetFlowsResponse} returns this
*/
proto.observer.GetFlowsResponse.prototype.setFlow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.observer.GetFlowsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetFlowsResponse} returns this
 */
proto.observer.GetFlowsResponse.prototype.clearFlow = function() {
  return this.setFlow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetFlowsResponse.prototype.hasFlow = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional relay.NodeStatusEvent node_status = 2;
 * @return {?proto.relay.NodeStatusEvent}
 */
proto.observer.GetFlowsResponse.prototype.getNodeStatus = function() {
  return /** @type{?proto.relay.NodeStatusEvent} */ (
    jspb.Message.getWrapperField(this, relay_relay_pb.NodeStatusEvent, 2));
};


/**
 * @param {?proto.relay.NodeStatusEvent|undefined} value
 * @return {!proto.observer.GetFlowsResponse} returns this
*/
proto.observer.GetFlowsResponse.prototype.setNodeStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.observer.GetFlowsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetFlowsResponse} returns this
 */
proto.observer.GetFlowsResponse.prototype.clearNodeStatus = function() {
  return this.setNodeStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetFlowsResponse.prototype.hasNodeStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional flow.LostEvent lost_events = 3;
 * @return {?proto.flow.LostEvent}
 */
proto.observer.GetFlowsResponse.prototype.getLostEvents = function() {
  return /** @type{?proto.flow.LostEvent} */ (
    jspb.Message.getWrapperField(this, flow_flow_pb.LostEvent, 3));
};


/**
 * @param {?proto.flow.LostEvent|undefined} value
 * @return {!proto.observer.GetFlowsResponse} returns this
*/
proto.observer.GetFlowsResponse.prototype.setLostEvents = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.observer.GetFlowsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetFlowsResponse} returns this
 */
proto.observer.GetFlowsResponse.prototype.clearLostEvents = function() {
  return this.setLostEvents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetFlowsResponse.prototype.hasLostEvents = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string node_name = 1000;
 * @return {string}
 */
proto.observer.GetFlowsResponse.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1000, ""));
};


/**
 * @param {string} value
 * @return {!proto.observer.GetFlowsResponse} returns this
 */
proto.observer.GetFlowsResponse.prototype.setNodeName = function(value) {
  return jspb.Message.setProto3StringField(this, 1000, value);
};


/**
 * optional google.protobuf.Timestamp time = 1001;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.observer.GetFlowsResponse.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1001));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.observer.GetFlowsResponse} returns this
*/
proto.observer.GetFlowsResponse.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 1001, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetFlowsResponse} returns this
 */
proto.observer.GetFlowsResponse.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetFlowsResponse.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1001) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.GetAgentEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.GetAgentEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.GetAgentEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetAgentEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    first: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    follow: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    since: (f = msg.getSince()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    until: (f = msg.getUntil()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.GetAgentEventsRequest}
 */
proto.observer.GetAgentEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.GetAgentEventsRequest;
  return proto.observer.GetAgentEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.GetAgentEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.GetAgentEventsRequest}
 */
proto.observer.GetAgentEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumber(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFirst(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFollow(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setSince(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUntil(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.GetAgentEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.GetAgentEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.GetAgentEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetAgentEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFirst();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getFollow();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSince();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUntil();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 number = 1;
 * @return {number}
 */
proto.observer.GetAgentEventsRequest.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.observer.GetAgentEventsRequest} returns this
 */
proto.observer.GetAgentEventsRequest.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool first = 9;
 * @return {boolean}
 */
proto.observer.GetAgentEventsRequest.prototype.getFirst = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.observer.GetAgentEventsRequest} returns this
 */
proto.observer.GetAgentEventsRequest.prototype.setFirst = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool follow = 2;
 * @return {boolean}
 */
proto.observer.GetAgentEventsRequest.prototype.getFollow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.observer.GetAgentEventsRequest} returns this
 */
proto.observer.GetAgentEventsRequest.prototype.setFollow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp since = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.observer.GetAgentEventsRequest.prototype.getSince = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.observer.GetAgentEventsRequest} returns this
*/
proto.observer.GetAgentEventsRequest.prototype.setSince = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetAgentEventsRequest} returns this
 */
proto.observer.GetAgentEventsRequest.prototype.clearSince = function() {
  return this.setSince(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetAgentEventsRequest.prototype.hasSince = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional google.protobuf.Timestamp until = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.observer.GetAgentEventsRequest.prototype.getUntil = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.observer.GetAgentEventsRequest} returns this
*/
proto.observer.GetAgentEventsRequest.prototype.setUntil = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetAgentEventsRequest} returns this
 */
proto.observer.GetAgentEventsRequest.prototype.clearUntil = function() {
  return this.setUntil(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetAgentEventsRequest.prototype.hasUntil = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.GetAgentEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.GetAgentEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.GetAgentEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetAgentEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    agentEvent: (f = msg.getAgentEvent()) && flow_flow_pb.AgentEvent.toObject(includeInstance, f),
    nodeName: jspb.Message.getFieldWithDefault(msg, 1000, ""),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.GetAgentEventsResponse}
 */
proto.observer.GetAgentEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.GetAgentEventsResponse;
  return proto.observer.GetAgentEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.GetAgentEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.GetAgentEventsResponse}
 */
proto.observer.GetAgentEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new flow_flow_pb.AgentEvent;
      reader.readMessage(value,flow_flow_pb.AgentEvent.deserializeBinaryFromReader);
      msg.setAgentEvent(value);
      break;
    case 1000:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    case 1001:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.GetAgentEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.GetAgentEventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.GetAgentEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetAgentEventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgentEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      flow_flow_pb.AgentEvent.serializeBinaryToWriter
    );
  }
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      1000,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional flow.AgentEvent agent_event = 1;
 * @return {?proto.flow.AgentEvent}
 */
proto.observer.GetAgentEventsResponse.prototype.getAgentEvent = function() {
  return /** @type{?proto.flow.AgentEvent} */ (
    jspb.Message.getWrapperField(this, flow_flow_pb.AgentEvent, 1));
};


/**
 * @param {?proto.flow.AgentEvent|undefined} value
 * @return {!proto.observer.GetAgentEventsResponse} returns this
*/
proto.observer.GetAgentEventsResponse.prototype.setAgentEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetAgentEventsResponse} returns this
 */
proto.observer.GetAgentEventsResponse.prototype.clearAgentEvent = function() {
  return this.setAgentEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetAgentEventsResponse.prototype.hasAgentEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string node_name = 1000;
 * @return {string}
 */
proto.observer.GetAgentEventsResponse.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1000, ""));
};


/**
 * @param {string} value
 * @return {!proto.observer.GetAgentEventsResponse} returns this
 */
proto.observer.GetAgentEventsResponse.prototype.setNodeName = function(value) {
  return jspb.Message.setProto3StringField(this, 1000, value);
};


/**
 * optional google.protobuf.Timestamp time = 1001;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.observer.GetAgentEventsResponse.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1001));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.observer.GetAgentEventsResponse} returns this
*/
proto.observer.GetAgentEventsResponse.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 1001, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetAgentEventsResponse} returns this
 */
proto.observer.GetAgentEventsResponse.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetAgentEventsResponse.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1001) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.GetDebugEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.GetDebugEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.GetDebugEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetDebugEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    first: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    follow: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    since: (f = msg.getSince()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    until: (f = msg.getUntil()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.GetDebugEventsRequest}
 */
proto.observer.GetDebugEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.GetDebugEventsRequest;
  return proto.observer.GetDebugEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.GetDebugEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.GetDebugEventsRequest}
 */
proto.observer.GetDebugEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumber(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFirst(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFollow(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setSince(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUntil(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.GetDebugEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.GetDebugEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.GetDebugEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetDebugEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFirst();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getFollow();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSince();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUntil();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 number = 1;
 * @return {number}
 */
proto.observer.GetDebugEventsRequest.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.observer.GetDebugEventsRequest} returns this
 */
proto.observer.GetDebugEventsRequest.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool first = 9;
 * @return {boolean}
 */
proto.observer.GetDebugEventsRequest.prototype.getFirst = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.observer.GetDebugEventsRequest} returns this
 */
proto.observer.GetDebugEventsRequest.prototype.setFirst = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool follow = 2;
 * @return {boolean}
 */
proto.observer.GetDebugEventsRequest.prototype.getFollow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.observer.GetDebugEventsRequest} returns this
 */
proto.observer.GetDebugEventsRequest.prototype.setFollow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp since = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.observer.GetDebugEventsRequest.prototype.getSince = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.observer.GetDebugEventsRequest} returns this
*/
proto.observer.GetDebugEventsRequest.prototype.setSince = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetDebugEventsRequest} returns this
 */
proto.observer.GetDebugEventsRequest.prototype.clearSince = function() {
  return this.setSince(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetDebugEventsRequest.prototype.hasSince = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional google.protobuf.Timestamp until = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.observer.GetDebugEventsRequest.prototype.getUntil = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.observer.GetDebugEventsRequest} returns this
*/
proto.observer.GetDebugEventsRequest.prototype.setUntil = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetDebugEventsRequest} returns this
 */
proto.observer.GetDebugEventsRequest.prototype.clearUntil = function() {
  return this.setUntil(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetDebugEventsRequest.prototype.hasUntil = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.GetDebugEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.GetDebugEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.GetDebugEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetDebugEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    debugEvent: (f = msg.getDebugEvent()) && flow_flow_pb.DebugEvent.toObject(includeInstance, f),
    nodeName: jspb.Message.getFieldWithDefault(msg, 1000, ""),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.GetDebugEventsResponse}
 */
proto.observer.GetDebugEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.GetDebugEventsResponse;
  return proto.observer.GetDebugEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.GetDebugEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.GetDebugEventsResponse}
 */
proto.observer.GetDebugEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new flow_flow_pb.DebugEvent;
      reader.readMessage(value,flow_flow_pb.DebugEvent.deserializeBinaryFromReader);
      msg.setDebugEvent(value);
      break;
    case 1000:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    case 1001:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.GetDebugEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.GetDebugEventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.GetDebugEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetDebugEventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebugEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      flow_flow_pb.DebugEvent.serializeBinaryToWriter
    );
  }
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      1000,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional flow.DebugEvent debug_event = 1;
 * @return {?proto.flow.DebugEvent}
 */
proto.observer.GetDebugEventsResponse.prototype.getDebugEvent = function() {
  return /** @type{?proto.flow.DebugEvent} */ (
    jspb.Message.getWrapperField(this, flow_flow_pb.DebugEvent, 1));
};


/**
 * @param {?proto.flow.DebugEvent|undefined} value
 * @return {!proto.observer.GetDebugEventsResponse} returns this
*/
proto.observer.GetDebugEventsResponse.prototype.setDebugEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetDebugEventsResponse} returns this
 */
proto.observer.GetDebugEventsResponse.prototype.clearDebugEvent = function() {
  return this.setDebugEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetDebugEventsResponse.prototype.hasDebugEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string node_name = 1000;
 * @return {string}
 */
proto.observer.GetDebugEventsResponse.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1000, ""));
};


/**
 * @param {string} value
 * @return {!proto.observer.GetDebugEventsResponse} returns this
 */
proto.observer.GetDebugEventsResponse.prototype.setNodeName = function(value) {
  return jspb.Message.setProto3StringField(this, 1000, value);
};


/**
 * optional google.protobuf.Timestamp time = 1001;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.observer.GetDebugEventsResponse.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1001));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.observer.GetDebugEventsResponse} returns this
*/
proto.observer.GetDebugEventsResponse.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 1001, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.GetDebugEventsResponse} returns this
 */
proto.observer.GetDebugEventsResponse.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.GetDebugEventsResponse.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1001) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.GetNodesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.GetNodesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.GetNodesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetNodesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.GetNodesRequest}
 */
proto.observer.GetNodesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.GetNodesRequest;
  return proto.observer.GetNodesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.GetNodesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.GetNodesRequest}
 */
proto.observer.GetNodesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.GetNodesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.GetNodesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.GetNodesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetNodesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.observer.GetNodesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.GetNodesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.GetNodesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.GetNodesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetNodesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.observer.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.GetNodesResponse}
 */
proto.observer.GetNodesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.GetNodesResponse;
  return proto.observer.GetNodesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.GetNodesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.GetNodesResponse}
 */
proto.observer.GetNodesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.observer.Node;
      reader.readMessage(value,proto.observer.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.GetNodesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.GetNodesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.GetNodesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetNodesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.observer.Node.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Node nodes = 1;
 * @return {!Array<!proto.observer.Node>}
 */
proto.observer.GetNodesResponse.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.observer.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.observer.Node, 1));
};


/**
 * @param {!Array<!proto.observer.Node>} value
 * @return {!proto.observer.GetNodesResponse} returns this
*/
proto.observer.GetNodesResponse.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.observer.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.observer.Node}
 */
proto.observer.GetNodesResponse.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.observer.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.observer.GetNodesResponse} returns this
 */
proto.observer.GetNodesResponse.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    address: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tls: (f = msg.getTls()) && proto.observer.TLS.toObject(includeInstance, f),
    uptimeNs: jspb.Message.getFieldWithDefault(msg, 6, 0),
    numFlows: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxFlows: jspb.Message.getFieldWithDefault(msg, 8, 0),
    seenFlows: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.Node}
 */
proto.observer.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.Node;
  return proto.observer.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.Node}
 */
proto.observer.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 4:
      var value = /** @type {!proto.relay.NodeState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 5:
      var value = new proto.observer.TLS;
      reader.readMessage(value,proto.observer.TLS.deserializeBinaryFromReader);
      msg.setTls(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUptimeNs(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumFlows(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxFlows(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeenFlows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTls();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.observer.TLS.serializeBinaryToWriter
    );
  }
  f = message.getUptimeNs();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getNumFlows();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getMaxFlows();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getSeenFlows();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.observer.Node.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.observer.Node} returns this
 */
proto.observer.Node.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.observer.Node.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.observer.Node} returns this
 */
proto.observer.Node.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string address = 3;
 * @return {string}
 */
proto.observer.Node.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.observer.Node} returns this
 */
proto.observer.Node.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional relay.NodeState state = 4;
 * @return {!proto.relay.NodeState}
 */
proto.observer.Node.prototype.getState = function() {
  return /** @type {!proto.relay.NodeState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.relay.NodeState} value
 * @return {!proto.observer.Node} returns this
 */
proto.observer.Node.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional TLS tls = 5;
 * @return {?proto.observer.TLS}
 */
proto.observer.Node.prototype.getTls = function() {
  return /** @type{?proto.observer.TLS} */ (
    jspb.Message.getWrapperField(this, proto.observer.TLS, 5));
};


/**
 * @param {?proto.observer.TLS|undefined} value
 * @return {!proto.observer.Node} returns this
*/
proto.observer.Node.prototype.setTls = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.Node} returns this
 */
proto.observer.Node.prototype.clearTls = function() {
  return this.setTls(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.Node.prototype.hasTls = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 uptime_ns = 6;
 * @return {number}
 */
proto.observer.Node.prototype.getUptimeNs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.observer.Node} returns this
 */
proto.observer.Node.prototype.setUptimeNs = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 num_flows = 7;
 * @return {number}
 */
proto.observer.Node.prototype.getNumFlows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.observer.Node} returns this
 */
proto.observer.Node.prototype.setNumFlows = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 max_flows = 8;
 * @return {number}
 */
proto.observer.Node.prototype.getMaxFlows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.observer.Node} returns this
 */
proto.observer.Node.prototype.setMaxFlows = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 seen_flows = 9;
 * @return {number}
 */
proto.observer.Node.prototype.getSeenFlows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.observer.Node} returns this
 */
proto.observer.Node.prototype.setSeenFlows = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.TLS.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.TLS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.TLS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.TLS.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    serverName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.TLS}
 */
proto.observer.TLS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.TLS;
  return proto.observer.TLS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.TLS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.TLS}
 */
proto.observer.TLS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.TLS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.TLS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.TLS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.TLS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getServerName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.observer.TLS.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.observer.TLS} returns this
 */
proto.observer.TLS.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string server_name = 2;
 * @return {string}
 */
proto.observer.TLS.prototype.getServerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.observer.TLS} returns this
 */
proto.observer.TLS.prototype.setServerName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.GetNamespacesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.GetNamespacesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.GetNamespacesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetNamespacesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.GetNamespacesRequest}
 */
proto.observer.GetNamespacesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.GetNamespacesRequest;
  return proto.observer.GetNamespacesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.GetNamespacesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.GetNamespacesRequest}
 */
proto.observer.GetNamespacesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.GetNamespacesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.GetNamespacesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.GetNamespacesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetNamespacesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.observer.GetNamespacesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.GetNamespacesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.GetNamespacesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.GetNamespacesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetNamespacesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespacesList: jspb.Message.toObjectList(msg.getNamespacesList(),
    proto.observer.Namespace.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.GetNamespacesResponse}
 */
proto.observer.GetNamespacesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.GetNamespacesResponse;
  return proto.observer.GetNamespacesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.GetNamespacesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.GetNamespacesResponse}
 */
proto.observer.GetNamespacesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.observer.Namespace;
      reader.readMessage(value,proto.observer.Namespace.deserializeBinaryFromReader);
      msg.addNamespaces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.GetNamespacesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.GetNamespacesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.GetNamespacesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.GetNamespacesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.observer.Namespace.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Namespace namespaces = 1;
 * @return {!Array<!proto.observer.Namespace>}
 */
proto.observer.GetNamespacesResponse.prototype.getNamespacesList = function() {
  return /** @type{!Array<!proto.observer.Namespace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.observer.Namespace, 1));
};


/**
 * @param {!Array<!proto.observer.Namespace>} value
 * @return {!proto.observer.GetNamespacesResponse} returns this
*/
proto.observer.GetNamespacesResponse.prototype.setNamespacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.observer.Namespace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.observer.Namespace}
 */
proto.observer.GetNamespacesResponse.prototype.addNamespaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.observer.Namespace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.observer.GetNamespacesResponse} returns this
 */
proto.observer.GetNamespacesResponse.prototype.clearNamespacesList = function() {
  return this.setNamespacesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.Namespace.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.Namespace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.Namespace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.Namespace.toObject = function(includeInstance, msg) {
  var f, obj = {
    cluster: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.Namespace}
 */
proto.observer.Namespace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.Namespace;
  return proto.observer.Namespace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.Namespace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.Namespace}
 */
proto.observer.Namespace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCluster(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.Namespace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.Namespace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.Namespace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.Namespace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCluster();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string cluster = 1;
 * @return {string}
 */
proto.observer.Namespace.prototype.getCluster = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.observer.Namespace} returns this
 */
proto.observer.Namespace.prototype.setCluster = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.observer.Namespace.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.observer.Namespace} returns this
 */
proto.observer.Namespace.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.observer.ExportEvent.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.observer.ExportEvent.ResponseTypesCase = {
  RESPONSE_TYPES_NOT_SET: 0,
  FLOW: 1,
  NODE_STATUS: 2,
  LOST_EVENTS: 3,
  AGENT_EVENT: 4,
  DEBUG_EVENT: 5
};

/**
 * @return {proto.observer.ExportEvent.ResponseTypesCase}
 */
proto.observer.ExportEvent.prototype.getResponseTypesCase = function() {
  return /** @type {proto.observer.ExportEvent.ResponseTypesCase} */(jspb.Message.computeOneofCase(this, proto.observer.ExportEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observer.ExportEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.observer.ExportEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observer.ExportEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.ExportEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    flow: (f = msg.getFlow()) && flow_flow_pb.Flow.toObject(includeInstance, f),
    nodeStatus: (f = msg.getNodeStatus()) && relay_relay_pb.NodeStatusEvent.toObject(includeInstance, f),
    lostEvents: (f = msg.getLostEvents()) && flow_flow_pb.LostEvent.toObject(includeInstance, f),
    agentEvent: (f = msg.getAgentEvent()) && flow_flow_pb.AgentEvent.toObject(includeInstance, f),
    debugEvent: (f = msg.getDebugEvent()) && flow_flow_pb.DebugEvent.toObject(includeInstance, f),
    nodeName: jspb.Message.getFieldWithDefault(msg, 1000, ""),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observer.ExportEvent}
 */
proto.observer.ExportEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observer.ExportEvent;
  return proto.observer.ExportEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observer.ExportEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observer.ExportEvent}
 */
proto.observer.ExportEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new flow_flow_pb.Flow;
      reader.readMessage(value,flow_flow_pb.Flow.deserializeBinaryFromReader);
      msg.setFlow(value);
      break;
    case 2:
      var value = new relay_relay_pb.NodeStatusEvent;
      reader.readMessage(value,relay_relay_pb.NodeStatusEvent.deserializeBinaryFromReader);
      msg.setNodeStatus(value);
      break;
    case 3:
      var value = new flow_flow_pb.LostEvent;
      reader.readMessage(value,flow_flow_pb.LostEvent.deserializeBinaryFromReader);
      msg.setLostEvents(value);
      break;
    case 4:
      var value = new flow_flow_pb.AgentEvent;
      reader.readMessage(value,flow_flow_pb.AgentEvent.deserializeBinaryFromReader);
      msg.setAgentEvent(value);
      break;
    case 5:
      var value = new flow_flow_pb.DebugEvent;
      reader.readMessage(value,flow_flow_pb.DebugEvent.deserializeBinaryFromReader);
      msg.setDebugEvent(value);
      break;
    case 1000:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    case 1001:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observer.ExportEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observer.ExportEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observer.ExportEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observer.ExportEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlow();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      flow_flow_pb.Flow.serializeBinaryToWriter
    );
  }
  f = message.getNodeStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      relay_relay_pb.NodeStatusEvent.serializeBinaryToWriter
    );
  }
  f = message.getLostEvents();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      flow_flow_pb.LostEvent.serializeBinaryToWriter
    );
  }
  f = message.getAgentEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      flow_flow_pb.AgentEvent.serializeBinaryToWriter
    );
  }
  f = message.getDebugEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      flow_flow_pb.DebugEvent.serializeBinaryToWriter
    );
  }
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      1000,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional flow.Flow flow = 1;
 * @return {?proto.flow.Flow}
 */
proto.observer.ExportEvent.prototype.getFlow = function() {
  return /** @type{?proto.flow.Flow} */ (
    jspb.Message.getWrapperField(this, flow_flow_pb.Flow, 1));
};


/**
 * @param {?proto.flow.Flow|undefined} value
 * @return {!proto.observer.ExportEvent} returns this
*/
proto.observer.ExportEvent.prototype.setFlow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.observer.ExportEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.ExportEvent} returns this
 */
proto.observer.ExportEvent.prototype.clearFlow = function() {
  return this.setFlow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.ExportEvent.prototype.hasFlow = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional relay.NodeStatusEvent node_status = 2;
 * @return {?proto.relay.NodeStatusEvent}
 */
proto.observer.ExportEvent.prototype.getNodeStatus = function() {
  return /** @type{?proto.relay.NodeStatusEvent} */ (
    jspb.Message.getWrapperField(this, relay_relay_pb.NodeStatusEvent, 2));
};


/**
 * @param {?proto.relay.NodeStatusEvent|undefined} value
 * @return {!proto.observer.ExportEvent} returns this
*/
proto.observer.ExportEvent.prototype.setNodeStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.observer.ExportEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.ExportEvent} returns this
 */
proto.observer.ExportEvent.prototype.clearNodeStatus = function() {
  return this.setNodeStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.ExportEvent.prototype.hasNodeStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional flow.LostEvent lost_events = 3;
 * @return {?proto.flow.LostEvent}
 */
proto.observer.ExportEvent.prototype.getLostEvents = function() {
  return /** @type{?proto.flow.LostEvent} */ (
    jspb.Message.getWrapperField(this, flow_flow_pb.LostEvent, 3));
};


/**
 * @param {?proto.flow.LostEvent|undefined} value
 * @return {!proto.observer.ExportEvent} returns this
*/
proto.observer.ExportEvent.prototype.setLostEvents = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.observer.ExportEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.ExportEvent} returns this
 */
proto.observer.ExportEvent.prototype.clearLostEvents = function() {
  return this.setLostEvents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.ExportEvent.prototype.hasLostEvents = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional flow.AgentEvent agent_event = 4;
 * @return {?proto.flow.AgentEvent}
 */
proto.observer.ExportEvent.prototype.getAgentEvent = function() {
  return /** @type{?proto.flow.AgentEvent} */ (
    jspb.Message.getWrapperField(this, flow_flow_pb.AgentEvent, 4));
};


/**
 * @param {?proto.flow.AgentEvent|undefined} value
 * @return {!proto.observer.ExportEvent} returns this
*/
proto.observer.ExportEvent.prototype.setAgentEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.observer.ExportEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.ExportEvent} returns this
 */
proto.observer.ExportEvent.prototype.clearAgentEvent = function() {
  return this.setAgentEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.ExportEvent.prototype.hasAgentEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional flow.DebugEvent debug_event = 5;
 * @return {?proto.flow.DebugEvent}
 */
proto.observer.ExportEvent.prototype.getDebugEvent = function() {
  return /** @type{?proto.flow.DebugEvent} */ (
    jspb.Message.getWrapperField(this, flow_flow_pb.DebugEvent, 5));
};


/**
 * @param {?proto.flow.DebugEvent|undefined} value
 * @return {!proto.observer.ExportEvent} returns this
*/
proto.observer.ExportEvent.prototype.setDebugEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.observer.ExportEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.ExportEvent} returns this
 */
proto.observer.ExportEvent.prototype.clearDebugEvent = function() {
  return this.setDebugEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.ExportEvent.prototype.hasDebugEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string node_name = 1000;
 * @return {string}
 */
proto.observer.ExportEvent.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1000, ""));
};


/**
 * @param {string} value
 * @return {!proto.observer.ExportEvent} returns this
 */
proto.observer.ExportEvent.prototype.setNodeName = function(value) {
  return jspb.Message.setProto3StringField(this, 1000, value);
};


/**
 * optional google.protobuf.Timestamp time = 1001;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.observer.ExportEvent.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1001));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.observer.ExportEvent} returns this
*/
proto.observer.ExportEvent.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 1001, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observer.ExportEvent} returns this
 */
proto.observer.ExportEvent.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observer.ExportEvent.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1001) != null;
};


goog.object.extend(exports, proto.observer);
