// source: flow/flow.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.flow.CiliumEventType', null, global);
goog.exportSymbol('proto.flow.DNS', null, global);
goog.exportSymbol('proto.flow.Endpoint', null, global);
goog.exportSymbol('proto.flow.Ethernet', null, global);
goog.exportSymbol('proto.flow.EventType', null, global);
goog.exportSymbol('proto.flow.EventTypeFilter', null, global);
goog.exportSymbol('proto.flow.Flow', null, global);
goog.exportSymbol('proto.flow.FlowFilter', null, global);
goog.exportSymbol('proto.flow.FlowType', null, global);
goog.exportSymbol('proto.flow.HTTP', null, global);
goog.exportSymbol('proto.flow.HTTPHeader', null, global);
goog.exportSymbol('proto.flow.ICMPv4', null, global);
goog.exportSymbol('proto.flow.ICMPv6', null, global);
goog.exportSymbol('proto.flow.IP', null, global);
goog.exportSymbol('proto.flow.IPVersion', null, global);
goog.exportSymbol('proto.flow.Kafka', null, global);
goog.exportSymbol('proto.flow.L7FlowType', null, global);
goog.exportSymbol('proto.flow.Layer4', null, global);
goog.exportSymbol('proto.flow.Layer4.ProtocolCase', null, global);
goog.exportSymbol('proto.flow.Layer7', null, global);
goog.exportSymbol('proto.flow.Layer7.RecordCase', null, global);
goog.exportSymbol('proto.flow.Payload', null, global);
goog.exportSymbol('proto.flow.Service', null, global);
goog.exportSymbol('proto.flow.TCP', null, global);
goog.exportSymbol('proto.flow.TCPFlags', null, global);
goog.exportSymbol('proto.flow.TraceObservationPoint', null, global);
goog.exportSymbol('proto.flow.TrafficDirection', null, global);
goog.exportSymbol('proto.flow.UDP', null, global);
goog.exportSymbol('proto.flow.Verdict', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.Flow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.flow.Flow.repeatedFields_, null);
};
goog.inherits(proto.flow.Flow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.Flow.displayName = 'proto.flow.Flow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.Layer4 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.flow.Layer4.oneofGroups_);
};
goog.inherits(proto.flow.Layer4, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.Layer4.displayName = 'proto.flow.Layer4';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.Layer7 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.flow.Layer7.oneofGroups_);
};
goog.inherits(proto.flow.Layer7, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.Layer7.displayName = 'proto.flow.Layer7';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.Endpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.flow.Endpoint.repeatedFields_, null);
};
goog.inherits(proto.flow.Endpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.Endpoint.displayName = 'proto.flow.Endpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.TCP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.TCP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.TCP.displayName = 'proto.flow.TCP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.IP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.IP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.IP.displayName = 'proto.flow.IP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.Ethernet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.Ethernet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.Ethernet.displayName = 'proto.flow.Ethernet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.TCPFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.TCPFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.TCPFlags.displayName = 'proto.flow.TCPFlags';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.UDP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.UDP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.UDP.displayName = 'proto.flow.UDP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.ICMPv4 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.ICMPv4, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.ICMPv4.displayName = 'proto.flow.ICMPv4';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.ICMPv6 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.ICMPv6, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.ICMPv6.displayName = 'proto.flow.ICMPv6';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.EventTypeFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.EventTypeFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.EventTypeFilter.displayName = 'proto.flow.EventTypeFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.CiliumEventType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.CiliumEventType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.CiliumEventType.displayName = 'proto.flow.CiliumEventType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.FlowFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.flow.FlowFilter.repeatedFields_, null);
};
goog.inherits(proto.flow.FlowFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.FlowFilter.displayName = 'proto.flow.FlowFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.Payload.displayName = 'proto.flow.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.DNS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.flow.DNS.repeatedFields_, null);
};
goog.inherits(proto.flow.DNS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.DNS.displayName = 'proto.flow.DNS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.HTTPHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.HTTPHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.HTTPHeader.displayName = 'proto.flow.HTTPHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.HTTP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.flow.HTTP.repeatedFields_, null);
};
goog.inherits(proto.flow.HTTP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.HTTP.displayName = 'proto.flow.HTTP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.Kafka = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.Kafka, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.Kafka.displayName = 'proto.flow.Kafka';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flow.Service = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flow.Service, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flow.Service.displayName = 'proto.flow.Service';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.flow.Flow.repeatedFields_ = [13,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.Flow.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.Flow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.Flow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Flow.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    verdict: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dropReason: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ethernet: (f = msg.getEthernet()) && proto.flow.Ethernet.toObject(includeInstance, f),
    ip: (f = msg.getIp()) && proto.flow.IP.toObject(includeInstance, f),
    l4: (f = msg.getL4()) && proto.flow.Layer4.toObject(includeInstance, f),
    source: (f = msg.getSource()) && proto.flow.Endpoint.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && proto.flow.Endpoint.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 10, 0),
    nodeName: jspb.Message.getFieldWithDefault(msg, 11, ""),
    sourceNamesList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    destinationNamesList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    l7: (f = msg.getL7()) && proto.flow.Layer7.toObject(includeInstance, f),
    reply: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    eventType: (f = msg.getEventType()) && proto.flow.CiliumEventType.toObject(includeInstance, f),
    sourceService: (f = msg.getSourceService()) && proto.flow.Service.toObject(includeInstance, f),
    destinationService: (f = msg.getDestinationService()) && proto.flow.Service.toObject(includeInstance, f),
    trafficDirection: jspb.Message.getFieldWithDefault(msg, 22, 0),
    policyMatchType: jspb.Message.getFieldWithDefault(msg, 23, 0),
    traceObservationPoint: jspb.Message.getFieldWithDefault(msg, 24, 0),
    summary: jspb.Message.getFieldWithDefault(msg, 100000, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.Flow}
 */
proto.flow.Flow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.Flow;
  return proto.flow.Flow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.Flow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.Flow}
 */
proto.flow.Flow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {!proto.flow.Verdict} */ (reader.readEnum());
      msg.setVerdict(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDropReason(value);
      break;
    case 4:
      var value = new proto.flow.Ethernet;
      reader.readMessage(value,proto.flow.Ethernet.deserializeBinaryFromReader);
      msg.setEthernet(value);
      break;
    case 5:
      var value = new proto.flow.IP;
      reader.readMessage(value,proto.flow.IP.deserializeBinaryFromReader);
      msg.setIp(value);
      break;
    case 6:
      var value = new proto.flow.Layer4;
      reader.readMessage(value,proto.flow.Layer4.deserializeBinaryFromReader);
      msg.setL4(value);
      break;
    case 8:
      var value = new proto.flow.Endpoint;
      reader.readMessage(value,proto.flow.Endpoint.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 9:
      var value = new proto.flow.Endpoint;
      reader.readMessage(value,proto.flow.Endpoint.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 10:
      var value = /** @type {!proto.flow.FlowType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addSourceNames(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addDestinationNames(value);
      break;
    case 15:
      var value = new proto.flow.Layer7;
      reader.readMessage(value,proto.flow.Layer7.deserializeBinaryFromReader);
      msg.setL7(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReply(value);
      break;
    case 19:
      var value = new proto.flow.CiliumEventType;
      reader.readMessage(value,proto.flow.CiliumEventType.deserializeBinaryFromReader);
      msg.setEventType(value);
      break;
    case 20:
      var value = new proto.flow.Service;
      reader.readMessage(value,proto.flow.Service.deserializeBinaryFromReader);
      msg.setSourceService(value);
      break;
    case 21:
      var value = new proto.flow.Service;
      reader.readMessage(value,proto.flow.Service.deserializeBinaryFromReader);
      msg.setDestinationService(value);
      break;
    case 22:
      var value = /** @type {!proto.flow.TrafficDirection} */ (reader.readEnum());
      msg.setTrafficDirection(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPolicyMatchType(value);
      break;
    case 24:
      var value = /** @type {!proto.flow.TraceObservationPoint} */ (reader.readEnum());
      msg.setTraceObservationPoint(value);
      break;
    case 100000:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.Flow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.Flow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.Flow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Flow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getVerdict();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDropReason();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getEthernet();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.flow.Ethernet.serializeBinaryToWriter
    );
  }
  f = message.getIp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.flow.IP.serializeBinaryToWriter
    );
  }
  f = message.getL4();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.flow.Layer4.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.flow.Endpoint.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.flow.Endpoint.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSourceNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
  f = message.getDestinationNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getL7();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.flow.Layer7.serializeBinaryToWriter
    );
  }
  f = message.getReply();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getEventType();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.flow.CiliumEventType.serializeBinaryToWriter
    );
  }
  f = message.getSourceService();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.flow.Service.serializeBinaryToWriter
    );
  }
  f = message.getDestinationService();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.flow.Service.serializeBinaryToWriter
    );
  }
  f = message.getTrafficDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      22,
      f
    );
  }
  f = message.getPolicyMatchType();
  if (f !== 0) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = message.getTraceObservationPoint();
  if (f !== 0.0) {
    writer.writeEnum(
      24,
      f
    );
  }
  f = message.getSummary();
  if (f.length > 0) {
    writer.writeString(
      100000,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp time = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.flow.Flow.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.flow.Flow} returns this
*/
proto.flow.Flow.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Flow.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Verdict verdict = 2;
 * @return {!proto.flow.Verdict}
 */
proto.flow.Flow.prototype.getVerdict = function() {
  return /** @type {!proto.flow.Verdict} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.flow.Verdict} value
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.setVerdict = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 drop_reason = 3;
 * @return {number}
 */
proto.flow.Flow.prototype.getDropReason = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.setDropReason = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Ethernet ethernet = 4;
 * @return {?proto.flow.Ethernet}
 */
proto.flow.Flow.prototype.getEthernet = function() {
  return /** @type{?proto.flow.Ethernet} */ (
    jspb.Message.getWrapperField(this, proto.flow.Ethernet, 4));
};


/**
 * @param {?proto.flow.Ethernet|undefined} value
 * @return {!proto.flow.Flow} returns this
*/
proto.flow.Flow.prototype.setEthernet = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.clearEthernet = function() {
  return this.setEthernet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Flow.prototype.hasEthernet = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional IP IP = 5;
 * @return {?proto.flow.IP}
 */
proto.flow.Flow.prototype.getIp = function() {
  return /** @type{?proto.flow.IP} */ (
    jspb.Message.getWrapperField(this, proto.flow.IP, 5));
};


/**
 * @param {?proto.flow.IP|undefined} value
 * @return {!proto.flow.Flow} returns this
*/
proto.flow.Flow.prototype.setIp = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.clearIp = function() {
  return this.setIp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Flow.prototype.hasIp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Layer4 l4 = 6;
 * @return {?proto.flow.Layer4}
 */
proto.flow.Flow.prototype.getL4 = function() {
  return /** @type{?proto.flow.Layer4} */ (
    jspb.Message.getWrapperField(this, proto.flow.Layer4, 6));
};


/**
 * @param {?proto.flow.Layer4|undefined} value
 * @return {!proto.flow.Flow} returns this
*/
proto.flow.Flow.prototype.setL4 = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.clearL4 = function() {
  return this.setL4(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Flow.prototype.hasL4 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Endpoint source = 8;
 * @return {?proto.flow.Endpoint}
 */
proto.flow.Flow.prototype.getSource = function() {
  return /** @type{?proto.flow.Endpoint} */ (
    jspb.Message.getWrapperField(this, proto.flow.Endpoint, 8));
};


/**
 * @param {?proto.flow.Endpoint|undefined} value
 * @return {!proto.flow.Flow} returns this
*/
proto.flow.Flow.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Flow.prototype.hasSource = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Endpoint destination = 9;
 * @return {?proto.flow.Endpoint}
 */
proto.flow.Flow.prototype.getDestination = function() {
  return /** @type{?proto.flow.Endpoint} */ (
    jspb.Message.getWrapperField(this, proto.flow.Endpoint, 9));
};


/**
 * @param {?proto.flow.Endpoint|undefined} value
 * @return {!proto.flow.Flow} returns this
*/
proto.flow.Flow.prototype.setDestination = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.clearDestination = function() {
  return this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Flow.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional FlowType Type = 10;
 * @return {!proto.flow.FlowType}
 */
proto.flow.Flow.prototype.getType = function() {
  return /** @type {!proto.flow.FlowType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.flow.FlowType} value
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional string node_name = 11;
 * @return {string}
 */
proto.flow.Flow.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.setNodeName = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * repeated string source_names = 13;
 * @return {!Array<string>}
 */
proto.flow.Flow.prototype.getSourceNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.setSourceNamesList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.addSourceNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.clearSourceNamesList = function() {
  return this.setSourceNamesList([]);
};


/**
 * repeated string destination_names = 14;
 * @return {!Array<string>}
 */
proto.flow.Flow.prototype.getDestinationNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.setDestinationNamesList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.addDestinationNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.clearDestinationNamesList = function() {
  return this.setDestinationNamesList([]);
};


/**
 * optional Layer7 l7 = 15;
 * @return {?proto.flow.Layer7}
 */
proto.flow.Flow.prototype.getL7 = function() {
  return /** @type{?proto.flow.Layer7} */ (
    jspb.Message.getWrapperField(this, proto.flow.Layer7, 15));
};


/**
 * @param {?proto.flow.Layer7|undefined} value
 * @return {!proto.flow.Flow} returns this
*/
proto.flow.Flow.prototype.setL7 = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.clearL7 = function() {
  return this.setL7(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Flow.prototype.hasL7 = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool reply = 16;
 * @return {boolean}
 */
proto.flow.Flow.prototype.getReply = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.setReply = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional CiliumEventType event_type = 19;
 * @return {?proto.flow.CiliumEventType}
 */
proto.flow.Flow.prototype.getEventType = function() {
  return /** @type{?proto.flow.CiliumEventType} */ (
    jspb.Message.getWrapperField(this, proto.flow.CiliumEventType, 19));
};


/**
 * @param {?proto.flow.CiliumEventType|undefined} value
 * @return {!proto.flow.Flow} returns this
*/
proto.flow.Flow.prototype.setEventType = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.clearEventType = function() {
  return this.setEventType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Flow.prototype.hasEventType = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional Service source_service = 20;
 * @return {?proto.flow.Service}
 */
proto.flow.Flow.prototype.getSourceService = function() {
  return /** @type{?proto.flow.Service} */ (
    jspb.Message.getWrapperField(this, proto.flow.Service, 20));
};


/**
 * @param {?proto.flow.Service|undefined} value
 * @return {!proto.flow.Flow} returns this
*/
proto.flow.Flow.prototype.setSourceService = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.clearSourceService = function() {
  return this.setSourceService(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Flow.prototype.hasSourceService = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional Service destination_service = 21;
 * @return {?proto.flow.Service}
 */
proto.flow.Flow.prototype.getDestinationService = function() {
  return /** @type{?proto.flow.Service} */ (
    jspb.Message.getWrapperField(this, proto.flow.Service, 21));
};


/**
 * @param {?proto.flow.Service|undefined} value
 * @return {!proto.flow.Flow} returns this
*/
proto.flow.Flow.prototype.setDestinationService = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.clearDestinationService = function() {
  return this.setDestinationService(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Flow.prototype.hasDestinationService = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional TrafficDirection traffic_direction = 22;
 * @return {!proto.flow.TrafficDirection}
 */
proto.flow.Flow.prototype.getTrafficDirection = function() {
  return /** @type {!proto.flow.TrafficDirection} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {!proto.flow.TrafficDirection} value
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.setTrafficDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 22, value);
};


/**
 * optional uint32 policy_match_type = 23;
 * @return {number}
 */
proto.flow.Flow.prototype.getPolicyMatchType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.setPolicyMatchType = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional TraceObservationPoint trace_observation_point = 24;
 * @return {!proto.flow.TraceObservationPoint}
 */
proto.flow.Flow.prototype.getTraceObservationPoint = function() {
  return /** @type {!proto.flow.TraceObservationPoint} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {!proto.flow.TraceObservationPoint} value
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.setTraceObservationPoint = function(value) {
  return jspb.Message.setProto3EnumField(this, 24, value);
};


/**
 * optional string Summary = 100000;
 * @return {string}
 */
proto.flow.Flow.prototype.getSummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100000, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.Flow} returns this
 */
proto.flow.Flow.prototype.setSummary = function(value) {
  return jspb.Message.setProto3StringField(this, 100000, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.flow.Layer4.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.flow.Layer4.ProtocolCase = {
  PROTOCOL_NOT_SET: 0,
  TCP: 1,
  UDP: 2,
  ICMPV4: 3,
  ICMPV6: 4
};

/**
 * @return {proto.flow.Layer4.ProtocolCase}
 */
proto.flow.Layer4.prototype.getProtocolCase = function() {
  return /** @type {proto.flow.Layer4.ProtocolCase} */(jspb.Message.computeOneofCase(this, proto.flow.Layer4.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.Layer4.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.Layer4.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.Layer4} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Layer4.toObject = function(includeInstance, msg) {
  var f, obj = {
    tcp: (f = msg.getTcp()) && proto.flow.TCP.toObject(includeInstance, f),
    udp: (f = msg.getUdp()) && proto.flow.UDP.toObject(includeInstance, f),
    icmpv4: (f = msg.getIcmpv4()) && proto.flow.ICMPv4.toObject(includeInstance, f),
    icmpv6: (f = msg.getIcmpv6()) && proto.flow.ICMPv6.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.Layer4}
 */
proto.flow.Layer4.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.Layer4;
  return proto.flow.Layer4.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.Layer4} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.Layer4}
 */
proto.flow.Layer4.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flow.TCP;
      reader.readMessage(value,proto.flow.TCP.deserializeBinaryFromReader);
      msg.setTcp(value);
      break;
    case 2:
      var value = new proto.flow.UDP;
      reader.readMessage(value,proto.flow.UDP.deserializeBinaryFromReader);
      msg.setUdp(value);
      break;
    case 3:
      var value = new proto.flow.ICMPv4;
      reader.readMessage(value,proto.flow.ICMPv4.deserializeBinaryFromReader);
      msg.setIcmpv4(value);
      break;
    case 4:
      var value = new proto.flow.ICMPv6;
      reader.readMessage(value,proto.flow.ICMPv6.deserializeBinaryFromReader);
      msg.setIcmpv6(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.Layer4.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.Layer4.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.Layer4} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Layer4.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTcp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.flow.TCP.serializeBinaryToWriter
    );
  }
  f = message.getUdp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.flow.UDP.serializeBinaryToWriter
    );
  }
  f = message.getIcmpv4();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.flow.ICMPv4.serializeBinaryToWriter
    );
  }
  f = message.getIcmpv6();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.flow.ICMPv6.serializeBinaryToWriter
    );
  }
};


/**
 * optional TCP TCP = 1;
 * @return {?proto.flow.TCP}
 */
proto.flow.Layer4.prototype.getTcp = function() {
  return /** @type{?proto.flow.TCP} */ (
    jspb.Message.getWrapperField(this, proto.flow.TCP, 1));
};


/**
 * @param {?proto.flow.TCP|undefined} value
 * @return {!proto.flow.Layer4} returns this
*/
proto.flow.Layer4.prototype.setTcp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.flow.Layer4.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Layer4} returns this
 */
proto.flow.Layer4.prototype.clearTcp = function() {
  return this.setTcp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Layer4.prototype.hasTcp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UDP UDP = 2;
 * @return {?proto.flow.UDP}
 */
proto.flow.Layer4.prototype.getUdp = function() {
  return /** @type{?proto.flow.UDP} */ (
    jspb.Message.getWrapperField(this, proto.flow.UDP, 2));
};


/**
 * @param {?proto.flow.UDP|undefined} value
 * @return {!proto.flow.Layer4} returns this
*/
proto.flow.Layer4.prototype.setUdp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.flow.Layer4.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Layer4} returns this
 */
proto.flow.Layer4.prototype.clearUdp = function() {
  return this.setUdp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Layer4.prototype.hasUdp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ICMPv4 ICMPv4 = 3;
 * @return {?proto.flow.ICMPv4}
 */
proto.flow.Layer4.prototype.getIcmpv4 = function() {
  return /** @type{?proto.flow.ICMPv4} */ (
    jspb.Message.getWrapperField(this, proto.flow.ICMPv4, 3));
};


/**
 * @param {?proto.flow.ICMPv4|undefined} value
 * @return {!proto.flow.Layer4} returns this
*/
proto.flow.Layer4.prototype.setIcmpv4 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.flow.Layer4.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Layer4} returns this
 */
proto.flow.Layer4.prototype.clearIcmpv4 = function() {
  return this.setIcmpv4(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Layer4.prototype.hasIcmpv4 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ICMPv6 ICMPv6 = 4;
 * @return {?proto.flow.ICMPv6}
 */
proto.flow.Layer4.prototype.getIcmpv6 = function() {
  return /** @type{?proto.flow.ICMPv6} */ (
    jspb.Message.getWrapperField(this, proto.flow.ICMPv6, 4));
};


/**
 * @param {?proto.flow.ICMPv6|undefined} value
 * @return {!proto.flow.Layer4} returns this
*/
proto.flow.Layer4.prototype.setIcmpv6 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.flow.Layer4.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Layer4} returns this
 */
proto.flow.Layer4.prototype.clearIcmpv6 = function() {
  return this.setIcmpv6(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Layer4.prototype.hasIcmpv6 = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.flow.Layer7.oneofGroups_ = [[100,101,102]];

/**
 * @enum {number}
 */
proto.flow.Layer7.RecordCase = {
  RECORD_NOT_SET: 0,
  DNS: 100,
  HTTP: 101,
  KAFKA: 102
};

/**
 * @return {proto.flow.Layer7.RecordCase}
 */
proto.flow.Layer7.prototype.getRecordCase = function() {
  return /** @type {proto.flow.Layer7.RecordCase} */(jspb.Message.computeOneofCase(this, proto.flow.Layer7.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.Layer7.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.Layer7.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.Layer7} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Layer7.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    latencyNs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dns: (f = msg.getDns()) && proto.flow.DNS.toObject(includeInstance, f),
    http: (f = msg.getHttp()) && proto.flow.HTTP.toObject(includeInstance, f),
    kafka: (f = msg.getKafka()) && proto.flow.Kafka.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.Layer7}
 */
proto.flow.Layer7.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.Layer7;
  return proto.flow.Layer7.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.Layer7} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.Layer7}
 */
proto.flow.Layer7.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.flow.L7FlowType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatencyNs(value);
      break;
    case 100:
      var value = new proto.flow.DNS;
      reader.readMessage(value,proto.flow.DNS.deserializeBinaryFromReader);
      msg.setDns(value);
      break;
    case 101:
      var value = new proto.flow.HTTP;
      reader.readMessage(value,proto.flow.HTTP.deserializeBinaryFromReader);
      msg.setHttp(value);
      break;
    case 102:
      var value = new proto.flow.Kafka;
      reader.readMessage(value,proto.flow.Kafka.deserializeBinaryFromReader);
      msg.setKafka(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.Layer7.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.Layer7.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.Layer7} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Layer7.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLatencyNs();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getDns();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.flow.DNS.serializeBinaryToWriter
    );
  }
  f = message.getHttp();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.flow.HTTP.serializeBinaryToWriter
    );
  }
  f = message.getKafka();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.flow.Kafka.serializeBinaryToWriter
    );
  }
};


/**
 * optional L7FlowType type = 1;
 * @return {!proto.flow.L7FlowType}
 */
proto.flow.Layer7.prototype.getType = function() {
  return /** @type {!proto.flow.L7FlowType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.flow.L7FlowType} value
 * @return {!proto.flow.Layer7} returns this
 */
proto.flow.Layer7.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 latency_ns = 2;
 * @return {number}
 */
proto.flow.Layer7.prototype.getLatencyNs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.Layer7} returns this
 */
proto.flow.Layer7.prototype.setLatencyNs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional DNS dns = 100;
 * @return {?proto.flow.DNS}
 */
proto.flow.Layer7.prototype.getDns = function() {
  return /** @type{?proto.flow.DNS} */ (
    jspb.Message.getWrapperField(this, proto.flow.DNS, 100));
};


/**
 * @param {?proto.flow.DNS|undefined} value
 * @return {!proto.flow.Layer7} returns this
*/
proto.flow.Layer7.prototype.setDns = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.flow.Layer7.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Layer7} returns this
 */
proto.flow.Layer7.prototype.clearDns = function() {
  return this.setDns(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Layer7.prototype.hasDns = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional HTTP http = 101;
 * @return {?proto.flow.HTTP}
 */
proto.flow.Layer7.prototype.getHttp = function() {
  return /** @type{?proto.flow.HTTP} */ (
    jspb.Message.getWrapperField(this, proto.flow.HTTP, 101));
};


/**
 * @param {?proto.flow.HTTP|undefined} value
 * @return {!proto.flow.Layer7} returns this
*/
proto.flow.Layer7.prototype.setHttp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.flow.Layer7.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Layer7} returns this
 */
proto.flow.Layer7.prototype.clearHttp = function() {
  return this.setHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Layer7.prototype.hasHttp = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional Kafka kafka = 102;
 * @return {?proto.flow.Kafka}
 */
proto.flow.Layer7.prototype.getKafka = function() {
  return /** @type{?proto.flow.Kafka} */ (
    jspb.Message.getWrapperField(this, proto.flow.Kafka, 102));
};


/**
 * @param {?proto.flow.Kafka|undefined} value
 * @return {!proto.flow.Layer7} returns this
*/
proto.flow.Layer7.prototype.setKafka = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.flow.Layer7.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Layer7} returns this
 */
proto.flow.Layer7.prototype.clearKafka = function() {
  return this.setKafka(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Layer7.prototype.hasKafka = function() {
  return jspb.Message.getField(this, 102) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.flow.Endpoint.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.Endpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.Endpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.Endpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Endpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    identity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    namespace: jspb.Message.getFieldWithDefault(msg, 3, ""),
    labelsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    podName: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.Endpoint}
 */
proto.flow.Endpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.Endpoint;
  return proto.flow.Endpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.Endpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.Endpoint}
 */
proto.flow.Endpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdentity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addLabels(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPodName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.Endpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.Endpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.Endpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Endpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getIdentity();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getPodName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 ID = 1;
 * @return {number}
 */
proto.flow.Endpoint.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.Endpoint} returns this
 */
proto.flow.Endpoint.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 identity = 2;
 * @return {number}
 */
proto.flow.Endpoint.prototype.getIdentity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.Endpoint} returns this
 */
proto.flow.Endpoint.prototype.setIdentity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string namespace = 3;
 * @return {string}
 */
proto.flow.Endpoint.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.Endpoint} returns this
 */
proto.flow.Endpoint.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string labels = 4;
 * @return {!Array<string>}
 */
proto.flow.Endpoint.prototype.getLabelsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.Endpoint} returns this
 */
proto.flow.Endpoint.prototype.setLabelsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.Endpoint} returns this
 */
proto.flow.Endpoint.prototype.addLabels = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.Endpoint} returns this
 */
proto.flow.Endpoint.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};


/**
 * optional string pod_name = 5;
 * @return {string}
 */
proto.flow.Endpoint.prototype.getPodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.Endpoint} returns this
 */
proto.flow.Endpoint.prototype.setPodName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.TCP.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.TCP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.TCP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.TCP.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcePort: jspb.Message.getFieldWithDefault(msg, 1, 0),
    destinationPort: jspb.Message.getFieldWithDefault(msg, 2, 0),
    flags: (f = msg.getFlags()) && proto.flow.TCPFlags.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.TCP}
 */
proto.flow.TCP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.TCP;
  return proto.flow.TCP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.TCP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.TCP}
 */
proto.flow.TCP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSourcePort(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDestinationPort(value);
      break;
    case 3:
      var value = new proto.flow.TCPFlags;
      reader.readMessage(value,proto.flow.TCPFlags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.TCP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.TCP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.TCP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.TCP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcePort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDestinationPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.flow.TCPFlags.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 source_port = 1;
 * @return {number}
 */
proto.flow.TCP.prototype.getSourcePort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.TCP} returns this
 */
proto.flow.TCP.prototype.setSourcePort = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 destination_port = 2;
 * @return {number}
 */
proto.flow.TCP.prototype.getDestinationPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.TCP} returns this
 */
proto.flow.TCP.prototype.setDestinationPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TCPFlags flags = 3;
 * @return {?proto.flow.TCPFlags}
 */
proto.flow.TCP.prototype.getFlags = function() {
  return /** @type{?proto.flow.TCPFlags} */ (
    jspb.Message.getWrapperField(this, proto.flow.TCPFlags, 3));
};


/**
 * @param {?proto.flow.TCPFlags|undefined} value
 * @return {!proto.flow.TCP} returns this
*/
proto.flow.TCP.prototype.setFlags = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.TCP} returns this
 */
proto.flow.TCP.prototype.clearFlags = function() {
  return this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.TCP.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.IP.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.IP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.IP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.IP.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destination: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ipversion: jspb.Message.getFieldWithDefault(msg, 3, 0),
    encrypted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.IP}
 */
proto.flow.IP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.IP;
  return proto.flow.IP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.IP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.IP}
 */
proto.flow.IP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestination(value);
      break;
    case 3:
      var value = /** @type {!proto.flow.IPVersion} */ (reader.readEnum());
      msg.setIpversion(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEncrypted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.IP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.IP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.IP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.IP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestination();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIpversion();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getEncrypted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.flow.IP.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.IP} returns this
 */
proto.flow.IP.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destination = 2;
 * @return {string}
 */
proto.flow.IP.prototype.getDestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.IP} returns this
 */
proto.flow.IP.prototype.setDestination = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional IPVersion ipVersion = 3;
 * @return {!proto.flow.IPVersion}
 */
proto.flow.IP.prototype.getIpversion = function() {
  return /** @type {!proto.flow.IPVersion} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.flow.IPVersion} value
 * @return {!proto.flow.IP} returns this
 */
proto.flow.IP.prototype.setIpversion = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool encrypted = 4;
 * @return {boolean}
 */
proto.flow.IP.prototype.getEncrypted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flow.IP} returns this
 */
proto.flow.IP.prototype.setEncrypted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.Ethernet.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.Ethernet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.Ethernet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Ethernet.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destination: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.Ethernet}
 */
proto.flow.Ethernet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.Ethernet;
  return proto.flow.Ethernet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.Ethernet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.Ethernet}
 */
proto.flow.Ethernet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.Ethernet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.Ethernet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.Ethernet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Ethernet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestination();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.flow.Ethernet.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.Ethernet} returns this
 */
proto.flow.Ethernet.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destination = 2;
 * @return {string}
 */
proto.flow.Ethernet.prototype.getDestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.Ethernet} returns this
 */
proto.flow.Ethernet.prototype.setDestination = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.TCPFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.TCPFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.TCPFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.TCPFlags.toObject = function(includeInstance, msg) {
  var f, obj = {
    fin: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    syn: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    rst: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    psh: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    ack: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    urg: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    ece: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    cwr: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    ns: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.TCPFlags}
 */
proto.flow.TCPFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.TCPFlags;
  return proto.flow.TCPFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.TCPFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.TCPFlags}
 */
proto.flow.TCPFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFin(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSyn(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRst(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPsh(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAck(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUrg(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEce(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCwr(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.TCPFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.TCPFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.TCPFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.TCPFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFin();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSyn();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRst();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPsh();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAck();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUrg();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getEce();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getCwr();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getNs();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional bool FIN = 1;
 * @return {boolean}
 */
proto.flow.TCPFlags.prototype.getFin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flow.TCPFlags} returns this
 */
proto.flow.TCPFlags.prototype.setFin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool SYN = 2;
 * @return {boolean}
 */
proto.flow.TCPFlags.prototype.getSyn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flow.TCPFlags} returns this
 */
proto.flow.TCPFlags.prototype.setSyn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool RST = 3;
 * @return {boolean}
 */
proto.flow.TCPFlags.prototype.getRst = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flow.TCPFlags} returns this
 */
proto.flow.TCPFlags.prototype.setRst = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool PSH = 4;
 * @return {boolean}
 */
proto.flow.TCPFlags.prototype.getPsh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flow.TCPFlags} returns this
 */
proto.flow.TCPFlags.prototype.setPsh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool ACK = 5;
 * @return {boolean}
 */
proto.flow.TCPFlags.prototype.getAck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flow.TCPFlags} returns this
 */
proto.flow.TCPFlags.prototype.setAck = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool URG = 6;
 * @return {boolean}
 */
proto.flow.TCPFlags.prototype.getUrg = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flow.TCPFlags} returns this
 */
proto.flow.TCPFlags.prototype.setUrg = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool ECE = 7;
 * @return {boolean}
 */
proto.flow.TCPFlags.prototype.getEce = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flow.TCPFlags} returns this
 */
proto.flow.TCPFlags.prototype.setEce = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool CWR = 8;
 * @return {boolean}
 */
proto.flow.TCPFlags.prototype.getCwr = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flow.TCPFlags} returns this
 */
proto.flow.TCPFlags.prototype.setCwr = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool NS = 9;
 * @return {boolean}
 */
proto.flow.TCPFlags.prototype.getNs = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flow.TCPFlags} returns this
 */
proto.flow.TCPFlags.prototype.setNs = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.UDP.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.UDP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.UDP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.UDP.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcePort: jspb.Message.getFieldWithDefault(msg, 1, 0),
    destinationPort: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.UDP}
 */
proto.flow.UDP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.UDP;
  return proto.flow.UDP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.UDP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.UDP}
 */
proto.flow.UDP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSourcePort(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDestinationPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.UDP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.UDP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.UDP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.UDP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcePort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDestinationPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 source_port = 1;
 * @return {number}
 */
proto.flow.UDP.prototype.getSourcePort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.UDP} returns this
 */
proto.flow.UDP.prototype.setSourcePort = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 destination_port = 2;
 * @return {number}
 */
proto.flow.UDP.prototype.getDestinationPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.UDP} returns this
 */
proto.flow.UDP.prototype.setDestinationPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.ICMPv4.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.ICMPv4.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.ICMPv4} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.ICMPv4.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.ICMPv4}
 */
proto.flow.ICMPv4.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.ICMPv4;
  return proto.flow.ICMPv4.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.ICMPv4} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.ICMPv4}
 */
proto.flow.ICMPv4.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.ICMPv4.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.ICMPv4.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.ICMPv4} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.ICMPv4.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.flow.ICMPv4.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.ICMPv4} returns this
 */
proto.flow.ICMPv4.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 code = 2;
 * @return {number}
 */
proto.flow.ICMPv4.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.ICMPv4} returns this
 */
proto.flow.ICMPv4.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.ICMPv6.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.ICMPv6.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.ICMPv6} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.ICMPv6.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.ICMPv6}
 */
proto.flow.ICMPv6.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.ICMPv6;
  return proto.flow.ICMPv6.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.ICMPv6} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.ICMPv6}
 */
proto.flow.ICMPv6.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.ICMPv6.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.ICMPv6.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.ICMPv6} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.ICMPv6.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.flow.ICMPv6.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.ICMPv6} returns this
 */
proto.flow.ICMPv6.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 code = 2;
 * @return {number}
 */
proto.flow.ICMPv6.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.ICMPv6} returns this
 */
proto.flow.ICMPv6.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.EventTypeFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.EventTypeFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.EventTypeFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.EventTypeFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    matchSubType: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    subType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.EventTypeFilter}
 */
proto.flow.EventTypeFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.EventTypeFilter;
  return proto.flow.EventTypeFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.EventTypeFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.EventTypeFilter}
 */
proto.flow.EventTypeFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMatchSubType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.EventTypeFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.EventTypeFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.EventTypeFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.EventTypeFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMatchSubType();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSubType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.flow.EventTypeFilter.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.EventTypeFilter} returns this
 */
proto.flow.EventTypeFilter.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool match_sub_type = 2;
 * @return {boolean}
 */
proto.flow.EventTypeFilter.prototype.getMatchSubType = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flow.EventTypeFilter} returns this
 */
proto.flow.EventTypeFilter.prototype.setMatchSubType = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 sub_type = 3;
 * @return {number}
 */
proto.flow.EventTypeFilter.prototype.getSubType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.EventTypeFilter} returns this
 */
proto.flow.EventTypeFilter.prototype.setSubType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.CiliumEventType.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.CiliumEventType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.CiliumEventType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.CiliumEventType.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    subType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.CiliumEventType}
 */
proto.flow.CiliumEventType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.CiliumEventType;
  return proto.flow.CiliumEventType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.CiliumEventType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.CiliumEventType}
 */
proto.flow.CiliumEventType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.CiliumEventType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.CiliumEventType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.CiliumEventType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.CiliumEventType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSubType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.flow.CiliumEventType.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.CiliumEventType} returns this
 */
proto.flow.CiliumEventType.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sub_type = 2;
 * @return {number}
 */
proto.flow.CiliumEventType.prototype.getSubType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.CiliumEventType} returns this
 */
proto.flow.CiliumEventType.prototype.setSubType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.flow.FlowFilter.repeatedFields_ = [1,2,7,10,16,3,4,8,11,17,5,6,9,12,13,14,15,18,19,20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.FlowFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.FlowFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.FlowFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.FlowFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceIpList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    sourcePodList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    sourceFqdnList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    sourceLabelList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    sourceServiceList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
    destinationIpList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    destinationPodList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    destinationFqdnList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    destinationLabelList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
    destinationServiceList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f,
    verdictList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    eventTypeList: jspb.Message.toObjectList(msg.getEventTypeList(),
    proto.flow.EventTypeFilter.toObject, includeInstance),
    httpStatusCodeList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    protocolList: (f = jspb.Message.getRepeatedField(msg, 12)) == null ? undefined : f,
    sourcePortList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    destinationPortList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    replyList: (f = jspb.Message.getRepeatedBooleanField(msg, 15)) == null ? undefined : f,
    dnsQueryList: (f = jspb.Message.getRepeatedField(msg, 18)) == null ? undefined : f,
    sourceIdentityList: (f = jspb.Message.getRepeatedField(msg, 19)) == null ? undefined : f,
    destinationIdentityList: (f = jspb.Message.getRepeatedField(msg, 20)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.FlowFilter}
 */
proto.flow.FlowFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.FlowFilter;
  return proto.flow.FlowFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.FlowFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.FlowFilter}
 */
proto.flow.FlowFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSourceIp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSourcePod(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addSourceFqdn(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addSourceLabel(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addSourceService(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addDestinationIp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addDestinationPod(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addDestinationFqdn(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addDestinationLabel(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.addDestinationService(value);
      break;
    case 5:
      var value = /** @type {!Array<!proto.flow.Verdict>} */ (reader.readPackedEnum());
      msg.setVerdictList(value);
      break;
    case 6:
      var value = new proto.flow.EventTypeFilter;
      reader.readMessage(value,proto.flow.EventTypeFilter.deserializeBinaryFromReader);
      msg.addEventType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addHttpStatusCode(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.addProtocol(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addSourcePort(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addDestinationPort(value);
      break;
    case 15:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setReplyList(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.addDnsQuery(value);
      break;
    case 19:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setSourceIdentityList(value);
      break;
    case 20:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setDestinationIdentityList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.FlowFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.FlowFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.FlowFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.FlowFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceIpList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSourcePodList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getSourceFqdnList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getSourceLabelList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getSourceServiceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
  f = message.getDestinationIpList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getDestinationPodList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getDestinationFqdnList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getDestinationLabelList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.getDestinationServiceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      17,
      f
    );
  }
  f = message.getVerdictList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
  f = message.getEventTypeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.flow.EventTypeFilter.serializeBinaryToWriter
    );
  }
  f = message.getHttpStatusCodeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getProtocolList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      12,
      f
    );
  }
  f = message.getSourcePortList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
  f = message.getDestinationPortList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getReplyList();
  if (f.length > 0) {
    writer.writePackedBool(
      15,
      f
    );
  }
  f = message.getDnsQueryList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      18,
      f
    );
  }
  f = message.getSourceIdentityList();
  if (f.length > 0) {
    writer.writePackedUint32(
      19,
      f
    );
  }
  f = message.getDestinationIdentityList();
  if (f.length > 0) {
    writer.writePackedUint32(
      20,
      f
    );
  }
};


/**
 * repeated string source_ip = 1;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getSourceIpList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setSourceIpList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addSourceIp = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearSourceIpList = function() {
  return this.setSourceIpList([]);
};


/**
 * repeated string source_pod = 2;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getSourcePodList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setSourcePodList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addSourcePod = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearSourcePodList = function() {
  return this.setSourcePodList([]);
};


/**
 * repeated string source_fqdn = 7;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getSourceFqdnList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setSourceFqdnList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addSourceFqdn = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearSourceFqdnList = function() {
  return this.setSourceFqdnList([]);
};


/**
 * repeated string source_label = 10;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getSourceLabelList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setSourceLabelList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addSourceLabel = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearSourceLabelList = function() {
  return this.setSourceLabelList([]);
};


/**
 * repeated string source_service = 16;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getSourceServiceList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setSourceServiceList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addSourceService = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearSourceServiceList = function() {
  return this.setSourceServiceList([]);
};


/**
 * repeated string destination_ip = 3;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getDestinationIpList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setDestinationIpList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addDestinationIp = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearDestinationIpList = function() {
  return this.setDestinationIpList([]);
};


/**
 * repeated string destination_pod = 4;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getDestinationPodList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setDestinationPodList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addDestinationPod = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearDestinationPodList = function() {
  return this.setDestinationPodList([]);
};


/**
 * repeated string destination_fqdn = 8;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getDestinationFqdnList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setDestinationFqdnList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addDestinationFqdn = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearDestinationFqdnList = function() {
  return this.setDestinationFqdnList([]);
};


/**
 * repeated string destination_label = 11;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getDestinationLabelList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setDestinationLabelList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addDestinationLabel = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearDestinationLabelList = function() {
  return this.setDestinationLabelList([]);
};


/**
 * repeated string destination_service = 17;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getDestinationServiceList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 17));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setDestinationServiceList = function(value) {
  return jspb.Message.setField(this, 17, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addDestinationService = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearDestinationServiceList = function() {
  return this.setDestinationServiceList([]);
};


/**
 * repeated Verdict verdict = 5;
 * @return {!Array<!proto.flow.Verdict>}
 */
proto.flow.FlowFilter.prototype.getVerdictList = function() {
  return /** @type {!Array<!proto.flow.Verdict>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.flow.Verdict>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setVerdictList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.flow.Verdict} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addVerdict = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearVerdictList = function() {
  return this.setVerdictList([]);
};


/**
 * repeated EventTypeFilter event_type = 6;
 * @return {!Array<!proto.flow.EventTypeFilter>}
 */
proto.flow.FlowFilter.prototype.getEventTypeList = function() {
  return /** @type{!Array<!proto.flow.EventTypeFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.flow.EventTypeFilter, 6));
};


/**
 * @param {!Array<!proto.flow.EventTypeFilter>} value
 * @return {!proto.flow.FlowFilter} returns this
*/
proto.flow.FlowFilter.prototype.setEventTypeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.flow.EventTypeFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.flow.EventTypeFilter}
 */
proto.flow.FlowFilter.prototype.addEventType = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.flow.EventTypeFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearEventTypeList = function() {
  return this.setEventTypeList([]);
};


/**
 * repeated string http_status_code = 9;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getHttpStatusCodeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setHttpStatusCodeList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addHttpStatusCode = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearHttpStatusCodeList = function() {
  return this.setHttpStatusCodeList([]);
};


/**
 * repeated string protocol = 12;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getProtocolList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 12));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setProtocolList = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addProtocol = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearProtocolList = function() {
  return this.setProtocolList([]);
};


/**
 * repeated string source_port = 13;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getSourcePortList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setSourcePortList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addSourcePort = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearSourcePortList = function() {
  return this.setSourcePortList([]);
};


/**
 * repeated string destination_port = 14;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getDestinationPortList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setDestinationPortList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addDestinationPort = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearDestinationPortList = function() {
  return this.setDestinationPortList([]);
};


/**
 * repeated bool reply = 15;
 * @return {!Array<boolean>}
 */
proto.flow.FlowFilter.prototype.getReplyList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 15));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setReplyList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addReply = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearReplyList = function() {
  return this.setReplyList([]);
};


/**
 * repeated string dns_query = 18;
 * @return {!Array<string>}
 */
proto.flow.FlowFilter.prototype.getDnsQueryList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 18));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setDnsQueryList = function(value) {
  return jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addDnsQuery = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearDnsQueryList = function() {
  return this.setDnsQueryList([]);
};


/**
 * repeated uint32 source_identity = 19;
 * @return {!Array<number>}
 */
proto.flow.FlowFilter.prototype.getSourceIdentityList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 19));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setSourceIdentityList = function(value) {
  return jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addSourceIdentity = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearSourceIdentityList = function() {
  return this.setSourceIdentityList([]);
};


/**
 * repeated uint32 destination_identity = 20;
 * @return {!Array<number>}
 */
proto.flow.FlowFilter.prototype.getDestinationIdentityList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 20));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.setDestinationIdentityList = function(value) {
  return jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.addDestinationIdentity = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.FlowFilter} returns this
 */
proto.flow.FlowFilter.prototype.clearDestinationIdentityList = function() {
  return this.setDestinationIdentityList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cpu: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lost: jspb.Message.getFieldWithDefault(msg, 3, 0),
    data: msg.getData_asB64(),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    hostName: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.Payload}
 */
proto.flow.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.Payload;
  return proto.flow.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.Payload}
 */
proto.flow.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.flow.EventType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCpu(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLost(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCpu();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLost();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getHostName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional EventType type = 1;
 * @return {!proto.flow.EventType}
 */
proto.flow.Payload.prototype.getType = function() {
  return /** @type {!proto.flow.EventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.flow.EventType} value
 * @return {!proto.flow.Payload} returns this
 */
proto.flow.Payload.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 CPU = 2;
 * @return {number}
 */
proto.flow.Payload.prototype.getCpu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.Payload} returns this
 */
proto.flow.Payload.prototype.setCpu = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 lost = 3;
 * @return {number}
 */
proto.flow.Payload.prototype.getLost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.Payload} returns this
 */
proto.flow.Payload.prototype.setLost = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.flow.Payload.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.flow.Payload.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.flow.Payload.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.flow.Payload} returns this
 */
proto.flow.Payload.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp time = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.flow.Payload.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.flow.Payload} returns this
*/
proto.flow.Payload.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flow.Payload} returns this
 */
proto.flow.Payload.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flow.Payload.prototype.hasTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string host_name = 6;
 * @return {string}
 */
proto.flow.Payload.prototype.getHostName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.Payload} returns this
 */
proto.flow.Payload.prototype.setHostName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.flow.DNS.repeatedFields_ = [2,4,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.DNS.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.DNS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.DNS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.DNS.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ipsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    ttl: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cnamesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    observationSource: jspb.Message.getFieldWithDefault(msg, 5, ""),
    rcode: jspb.Message.getFieldWithDefault(msg, 6, 0),
    qtypesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    rrtypesList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.DNS}
 */
proto.flow.DNS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.DNS;
  return proto.flow.DNS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.DNS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.DNS}
 */
proto.flow.DNS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addIps(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTtl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addCnames(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setObservationSource(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addQtypes(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addRrtypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.DNS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.DNS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.DNS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.DNS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIpsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCnamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getObservationSource();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRcode();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getQtypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getRrtypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.flow.DNS.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string ips = 2;
 * @return {!Array<string>}
 */
proto.flow.DNS.prototype.getIpsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.setIpsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.addIps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.clearIpsList = function() {
  return this.setIpsList([]);
};


/**
 * optional uint32 ttl = 3;
 * @return {number}
 */
proto.flow.DNS.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.setTtl = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated string cnames = 4;
 * @return {!Array<string>}
 */
proto.flow.DNS.prototype.getCnamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.setCnamesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.addCnames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.clearCnamesList = function() {
  return this.setCnamesList([]);
};


/**
 * optional string observation_source = 5;
 * @return {string}
 */
proto.flow.DNS.prototype.getObservationSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.setObservationSource = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 rcode = 6;
 * @return {number}
 */
proto.flow.DNS.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.setRcode = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated string qtypes = 7;
 * @return {!Array<string>}
 */
proto.flow.DNS.prototype.getQtypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.setQtypesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.addQtypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.clearQtypesList = function() {
  return this.setQtypesList([]);
};


/**
 * repeated string rrtypes = 8;
 * @return {!Array<string>}
 */
proto.flow.DNS.prototype.getRrtypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.setRrtypesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.addRrtypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.DNS} returns this
 */
proto.flow.DNS.prototype.clearRrtypesList = function() {
  return this.setRrtypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.HTTPHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.HTTPHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.HTTPHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.HTTPHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.HTTPHeader}
 */
proto.flow.HTTPHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.HTTPHeader;
  return proto.flow.HTTPHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.HTTPHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.HTTPHeader}
 */
proto.flow.HTTPHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.HTTPHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.HTTPHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.HTTPHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.HTTPHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.flow.HTTPHeader.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.HTTPHeader} returns this
 */
proto.flow.HTTPHeader.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.flow.HTTPHeader.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.HTTPHeader} returns this
 */
proto.flow.HTTPHeader.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.flow.HTTP.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.HTTP.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.HTTP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.HTTP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.HTTP.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    method: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, ""),
    protocol: jspb.Message.getFieldWithDefault(msg, 4, ""),
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.flow.HTTPHeader.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.HTTP}
 */
proto.flow.HTTP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.HTTP;
  return proto.flow.HTTP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.HTTP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.HTTP}
 */
proto.flow.HTTP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    case 5:
      var value = new proto.flow.HTTPHeader;
      reader.readMessage(value,proto.flow.HTTPHeader.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.HTTP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.HTTP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.HTTP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.HTTP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProtocol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.flow.HTTPHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.flow.HTTP.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.HTTP} returns this
 */
proto.flow.HTTP.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string method = 2;
 * @return {string}
 */
proto.flow.HTTP.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.HTTP} returns this
 */
proto.flow.HTTP.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.flow.HTTP.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.HTTP} returns this
 */
proto.flow.HTTP.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string protocol = 4;
 * @return {string}
 */
proto.flow.HTTP.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.HTTP} returns this
 */
proto.flow.HTTP.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated HTTPHeader headers = 5;
 * @return {!Array<!proto.flow.HTTPHeader>}
 */
proto.flow.HTTP.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.flow.HTTPHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.flow.HTTPHeader, 5));
};


/**
 * @param {!Array<!proto.flow.HTTPHeader>} value
 * @return {!proto.flow.HTTP} returns this
*/
proto.flow.HTTP.prototype.setHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.flow.HTTPHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.flow.HTTPHeader}
 */
proto.flow.HTTP.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.flow.HTTPHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flow.HTTP} returns this
 */
proto.flow.HTTP.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.Kafka.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.Kafka.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.Kafka} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Kafka.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorCode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    apiVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    apiKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    correlationId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    topic: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.Kafka}
 */
proto.flow.Kafka.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.Kafka;
  return proto.flow.Kafka.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.Kafka} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.Kafka}
 */
proto.flow.Kafka.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApiVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCorrelationId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.Kafka.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.Kafka.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.Kafka} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Kafka.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getApiVersion();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getApiKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCorrelationId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 error_code = 1;
 * @return {number}
 */
proto.flow.Kafka.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.Kafka} returns this
 */
proto.flow.Kafka.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 api_version = 2;
 * @return {number}
 */
proto.flow.Kafka.prototype.getApiVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.Kafka} returns this
 */
proto.flow.Kafka.prototype.setApiVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string api_key = 3;
 * @return {string}
 */
proto.flow.Kafka.prototype.getApiKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.Kafka} returns this
 */
proto.flow.Kafka.prototype.setApiKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 correlation_id = 4;
 * @return {number}
 */
proto.flow.Kafka.prototype.getCorrelationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.flow.Kafka} returns this
 */
proto.flow.Kafka.prototype.setCorrelationId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string topic = 5;
 * @return {string}
 */
proto.flow.Kafka.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.Kafka} returns this
 */
proto.flow.Kafka.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flow.Service.prototype.toObject = function(opt_includeInstance) {
  return proto.flow.Service.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flow.Service} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Service.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flow.Service}
 */
proto.flow.Service.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flow.Service;
  return proto.flow.Service.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flow.Service} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flow.Service}
 */
proto.flow.Service.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flow.Service.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flow.Service.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flow.Service} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flow.Service.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.flow.Service.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.Service} returns this
 */
proto.flow.Service.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.flow.Service.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flow.Service} returns this
 */
proto.flow.Service.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.flow.FlowType = {
  UNKNOWN_TYPE: 0,
  L3_L4: 1,
  L7: 2
};

/**
 * @enum {number}
 */
proto.flow.TraceObservationPoint = {
  UNKNOWN_POINT: 0,
  TO_PROXY: 1,
  TO_HOST: 2,
  TO_STACK: 3,
  TO_OVERLAY: 4,
  TO_ENDPOINT: 101,
  FROM_ENDPOINT: 5,
  FROM_PROXY: 6,
  FROM_HOST: 7,
  FROM_STACK: 8,
  FROM_OVERLAY: 9,
  FROM_NETWORK: 10,
  TO_NETWORK: 11
};

/**
 * @enum {number}
 */
proto.flow.L7FlowType = {
  UNKNOWN_L7_TYPE: 0,
  REQUEST: 1,
  RESPONSE: 2,
  SAMPLE: 3
};

/**
 * @enum {number}
 */
proto.flow.IPVersion = {
  IP_NOT_USED: 0,
  IPV4: 1,
  IPV6: 2
};

/**
 * @enum {number}
 */
proto.flow.Verdict = {
  VERDICT_UNKNOWN: 0,
  FORWARDED: 1,
  DROPPED: 2,
  ERROR: 3
};

/**
 * @enum {number}
 */
proto.flow.TrafficDirection = {
  TRAFFIC_DIRECTION_UNKNOWN: 0,
  INGRESS: 1,
  EGRESS: 2
};

/**
 * @enum {number}
 */
proto.flow.EventType = {
  UNKNOWN: 0,
  EVENTSAMPLE: 9,
  RECORDLOST: 2
};

goog.object.extend(exports, proto.flow);
