# A timestamp formatted according to the IETF RFC 3339 Internet Date and Time Format
# (https://tools.ietf.org/html/rfc3339#section-5.6),
# with the date and time separated by "T", e.g. "2017-05-10T11:35:00Z
scalar DateTime

enum DiscoverFilterEnum {
  # discover only flows that goes ingress to app deployment from outside
  INBOUND
  # discover only flows that goes egress from app deployment to outside
  OUTBOUND
  # discover only flows within app deployment boundaries
  INTRA_APP
}

# A Covalent user.
type User {
  name: String! # Name of the user.
  email: String! # Email address of the user.
  discoverCluster(
    clusterId: String!
    namespaces: [String!]
    startedAfter: DateTime!
    excludedLabelKeys: [String!]!
    nameLabelKeys: [String!]!
    filterBy: FlowFiltersInput
  ): DiscoverClusterResult!
  # Returns a list of clusters that belong to this user.
  clusters: [Cluster!]!
  getCluster(id: String!): Cluster! # Returns single cluster associated with given id.
  # Returns the flow with a given ID.
  flow(
    id: String!
    # Returns flow from the TSDB.
    nextgenstore: Boolean
    labels: [LabelInput!]
  ): Flow!
  # Returns flows.
  flows(
    # Returns first n elements.
    first: Int
    # Returns elements that come after this cursor.
    after: String
    # Returns last n elements.
    last: Int
    # Returns elements that come before this cursor.
    before: String
    # Filtering options.
    filterBy: FlowFiltersInput
    # Returns flows from the TSDB.
    nextgenstore: Boolean
    # If set to true, source endpoints get grouped by namespace instead of security ID.
    groupSourceByNamespace: Boolean
    # If set to true, destination endpoints get grouped by namespace instead of security ID.
    groupDestinationByNamespace: Boolean
    # If set to true, destination endpoints get grouped by DNS name instead of security ID.
    groupDestinationByDnsName: Boolean
    # If set to true, return unaggregated results
    unaggregated: Boolean
  ): FlowConnection!

  # Returns policy specs that match the specified filters.
  policySpecs(filterBy: PolicySpecsFilterInput!): [PolicySpecs!]!
  # Returns misc counters for dashboard
  dashboardCounters(
    filterBy: DashboardCountersFiltersInput!
  ): DashboardCounters!
}

type DashboardCounters {
  # Counter of pods not managed by cilium
  notCiliumManagedPods: Int
  # Counter of host-networking pods not managed by cilium
  notCiliumManagedHostNetworkingPods: Int
}

input DashboardCountersFiltersInput {
  # Returns counters observed in this cluster
  clusterId: String!
}

enum PolicyTypeEnum {
  CILIUM_NETWORK_POLICY
  KUBERNETES_NETWORK_POLICY
}

input PolicySpecsFilterInput {
  clusterId: String!
  labels: [LabelInput!]
}

type PolicySpecs {
  policyNamespace: String!
  policyName: String!
  type: PolicyTypeEnum!
  ingressSpecs: [String!]!
  egressSpecs: [String!]!
}

input FlowFiltersInput {
  # Returns flows observed in this cluster. This field is mutually exclusive with the
  # deploymentId field.
  clusterId: String
  # Returns flows observed in this deployment. This field is mutually exclusive with
  # the clusterId field.
  deploymentId: String
  # Returns flows with a timestamp greater than this timestamp.
  after: DateTime
  # Returns flows with a timestamp less than this timestamp.
  before: DateTime
  # Returns flows if the forwarding status matches.
  forwardingStatus: ForwardingStatus
  # More granular filtering for rejected flows with specific reasons.
  rejectedReason: [RejectedReason!]
  # Filter flows by source endpoint labels.
  sourceLabels: [LabelInput!]
  # Filter flows by destination endpoint labels.
  destinationLabels: [LabelInput!]
  # Filter flows by source or destination endpoints. This filter option returns flows
  # whose source or destination endpoint labels match the provided labels.
  labels: [LabelInput!]
  # Filter out flows by source or destination endpoints, which labels contains the specified labels.
  excludeLabels: [LabelInput!]
  # Filter flows by source IP address.
  sourceIpAddress: String
  # Filter flows by destination IP address.
  destinationIpAddress: String
  # Filter flows by destination DNS name.
  destinationDnsName: String
  # Filter flows by source seccurity ID.
  sourceSecurityId: Int
  # Filter flows by destination seccurity ID.
  destinationSecurityId: Int
  # Filter flows by destination port.
  destinationPort: Int
  # Filter interapp flows
  interappTraffic: [String]
  # Filter inbound flows
  inboundTraffic: [String]
  # Filter outbound flows
  outboundTraffic: [String]
  # If set true, only show flows where source namespace is not equal destination namespace
  crossNamespaceOnly: Boolean
  # Filter by http status code
  httpStatusCode: String
}

# Defines forwarding status.
enum ForwardingStatus {
  UNDEFINED_POLICY_DECISION
  FORWARDED
  REJECTED
  DROPPED
}

enum FlowStateChange {
  UNSPEC
  NEW
  ESTABLISHED
  FIRST_ERROR
  ERROR
  CLOSED
}

# Hand-picked collection of reasons that are exposed to the UI for advanced filtering.
# All possible values: https://github.com/cilium/cilium/blob/master/pkg/monitor/api/drop.go#L27
enum RejectedReason {
  CT_MAP_INSERTION_FAILED
  CT_TRUNCATED_OR_INVALID_HEADER
  CT_UNKNOWN_L4_PROTOCOL
  ERROR_CORRECTING_L3_CHECKSUM
  ERROR_CORRECTING_L4_CHECKSUM
  ERROR_RETREIVING_TUNNEL_KEY
  ERROR_WRITING_TO_PACKET
  INVALID_IPV6_HEADER
  INVALID_PACKET
  INVALID_SOURCE_IP
  IP_FRAGMENTATION_NOT_SUPPORTED
  LOCAL_HOST_UNREACHABLE
  MISSED_TAIL_CALL
  NO_CONFIGURATION
  NO_MAPPING_FOR_NAT
  NO_TUNNEL_ENCAPSULATION_ENDPOINT
  POLICY_DENIED_L3
  SERVICE_BACKEND_NOT_FOUND
  STALE_OR_UNROUTABLE_IP
  UNKNOWN_CONNECTION_TRACKING_STATE
  UNKNOWN_ICMPV4_CODE
  UNKNOWN_ICMPV4_TYPE
  UNKNOWN_ICMPV6_CODE
  UNKNOWN_ICMPV6_TYPE
  UNKNOWN_L3_TARGET_ADDRESS
  UNKNOWN_L4_PROTOCOL
  UNSUPPORTED_L2_PROTOCOL
  UNSUPPORTED_L3_PROTOCOL
  UNSUPPORTED_NAT_PROTOCOL
}

# Connection object for flow.
type FlowConnection {
  pageInfo: PageInfo!
  edges: [FlowEdge!]!
}

# Page information for a connection object.
type PageInfo {
  # Indicates whether there is a next page in the connection.
  hasNextPage: Boolean!
  # Indicates whether there is a previous page in the connection.
  hasPreviousPage: Boolean!
  # A cursor that points to the first element in the page.
  startCursor: String!
  # A cursor that points to the last element in the page.
  endCursor: String!
}

# Edge object for flow.
type FlowEdge {
  cursor: String!
  node: Flow!
}

# Describes L7 DNS Response
type FlowDnsResponse {
  query: String! # dns name
  ips: [String!]! # list of ips
  rcode: String! # dns rcode (example: NXDOMAIN)
}
input FlowDnsResponseInput {
  query: String! # dns name
  ips: [String!]! # list of ips
  rcode: String! # dns rcode (example: NXDOMAIN)
}

# Describes L7 HTTP Response
type FlowHttpResponse {
  code: Int!
  method: String!
  url: String!
  protocol: String!
  headers: [FlowHttpHeader!]!
}
input FlowHttpResponseInput {
  code: Int!
  method: String!
  url: String!
  protocol: String!
  headers: [FlowHttpHeaderInput!]!
}

# Describes Metrics Response
type FlowMetricsResponse {
  latencyMs: Float!
}
input FlowMetricsResponseInput {
  latencyMs: Float!
}

type FlowHttpHeader {
  key: String!
  value: String!
}
input FlowHttpHeaderInput {
  key: String!
  value: String!
}

# A flow.
type Flow {
  id: String!
  hash: String!
  sourceSecurityId: Int!
  sourceDeploymentId: String!
  sourceLabels: [Label!]!
  sourcePodName: String
  sourceIpAddress: String
  destinationSecurityId: Int!
  destinationDeploymentId: String!
  destinationLabels: [Label!]!
  destinationIpAddress: String
  destinationPodName: String
  destinationDnsName: String
  destinationL4Protocol: String!
  destinationL7Protocol: String
  destinationPort: Int
  destinationFunctionName: String
  dnsResponse: FlowDnsResponse
  httpResponse: FlowHttpResponse
  metricsResponse: FlowMetricsResponse
  tcpControlBits: [String!]!
  timestamp: DateTime!
  forwardingStatus: ForwardingStatus!
  forwardingStatusDetails: [String!]!
  direction: FlowDirection
  rejectedReason: RejectedReason
  rejectedReasonMessage: String
  # this is "request" or "response" flow
  requestOrResponse: String
  # https://github.com/cilium/cilium/blob/2896f853fe123d353ef9900a09afbcda94b2ab54/pkg/monitor/api/types.go#L132
  ciliumEventSubType: String
}

enum FlowDirection {
  INGRESS
  EGRESS
}

type DiscoverClusterResult {
  endpoints: [AppEndpoint!]!
  responseHash: String!
  responseTimestamp: DateTime
}

enum ClusterComponentStatus {
  UNKNOWN
  ERROR
  PENDING
  OK
}

# PodStatus represents status of each K8s pod
type PodStatus {
  # Status of the pod.
  status: ClusterComponentStatus!
  # (optional) Error message. This field is set to null if the status is not ERROR.
  error: String
  # Name of the node e.g. minikube where the pod is running.
  hostname: String!
  # Name of the namespace where this policy has been appied.
  namespace: String!
  # Name of the Pod.
  name: String!
  # True if the pod is running in host networking mode.
  hostNetwork: Boolean!
  # Software version of the pod.
  version: String!
}

# CiliumNetworkPolicyStatus represents status of each cilium network policy
type CiliumNetworkPolicyStatus {
  # Status of the cilium network policy.
  status: ClusterComponentStatus!
  # (optional) Error message. This field is set to null if the status is not ERROR.
  error: String
  # Name of the policy.
  name: String
  # Name of the node e.g. minikube where the pod is running.
  hostname: String!
  # Name of the namespace where this policy has been appied.
  namespace: String!
  # (optional) The desired cilium network policy version.
  desiredVersion: String
  # (optional) The current cilium network policy version.
  currentVersion: String
}

type ClusterStatus {
  # Status of the component. Some components, such as components of type K8S_CONTROLLER
  # can have multiple associated K8S_PODS, each having their own status. This is the reason
  # status is an unordered list of ClusterComponentStatus objects.
  ciliumNetworkPolicies: [CiliumNetworkPolicyStatus!]!
  pods: [PodStatus!]!
  date: String
}

type Cluster {
  # ID of the cluster.
  id: String!
  # Name of the cluster.
  name: String!
  # Type of the cluster.
  type: ClusterType!
  # Namespaces in this cluster.
  namespaces: [String!]!
  lastSynced: DateTime
  # (Optional) Information about the status of the cluster.
  status: ClusterStatus
  # List of pods that are not managed by cilium
  unmanagedPods: [Pod!]
  # List of Cilium network policies in this cluster. You can optionally specify a namespace
  # to limit the results to CNPs in the namespace.
  cnp(namespace: String): [CiliumNetworkPolicy!]
  # List of Cilium Endpoints.
  cep(namespace: String): [CiliumEndpoint!]
}

# Represents a Cilium network policy.
type CiliumNetworkPolicy {
  # Namespace this CNP belongs to.
  namespace: String!
  # Name of the CNP.
  name: String!
  # Timestamp at which this CNP was created.
  creationTimestamp: DateTime!
  # The full CNP in YAML format.
  yaml: String!
}

# Represents a Kubernetes network policy.
type KubernetesNetworkPolicy {
  # Namespace this KNP belongs to.
  namespace: String!
  # Name of the KNP.
  name: String!
  # Timestamp at which this KNP was created.
  creationTimestamp: DateTime!
  # The full KNP in YAML format.
  yaml: String!
}

# Represents FailingControllers for the endpoint
type CiliumEndpointFailingController {
  # Number of consecutive controller failures
  consecutiveFailureCount: String!
  # Total number of controller failures
  failureCount: String!
  # Failure message from failing controller
  lastFailureMsg: String!
  # Timestamp for last controller failure
  lastFailureTimestamp: String!
  # Timestamp for last controller success
  lastSuccessTimestamp: String!
  # Total number successful controller executions
  successCount: String!
}

type CiliumEndpointAllowedIdentity {
  identityLabels: [Label!]!
  port: Int
  protocol: String
}

type CiliumEndpointPolicyStatus {
  enforcing: Boolean!
  allowed: [CiliumEndpointAllowedIdentity!]
}

# Cilium Endpoint Information
type CiliumEndpoint {
  # Cilium Endpoint ID
  endpointId: String!
  # Namespace
  namespace: String!
  # Name of CEP
  name: String!
  # Cilium Identity ID
  identityId: String!
  # Cilium Identity labels
  identityLabels: [Label!]!
  # IPv4 addresses
  ipv4Addresses: [String!]!
  # IPv6 addresses
  ipv6Addresses: [String!]!
  # Log message
  logMessage: String!
  # Failing controllers
  failingControllers: [CiliumEndpointFailingController!]!
  ingress: CiliumEndpointPolicyStatus
  egress: CiliumEndpointPolicyStatus
}

type Pod {
  namespace: String!
  name: String!
  hostNetwork: Boolean!
}

type Endpoint {
  labels: [Label!]!
  name: String!
}

enum AppEndpointType {
  # Endpoint does not belong to the app, but is managed by Cilium.
  OUTSIDE_MANAGED
  # Source "reserved:world" endpoint.
  SOURCE_RESERVED_WORLD
  # The default /0 CIDR endpoint for CIDR destinations.
  CIDR_ALLOW_ALL
  # DNS-based endpoint.
  DNS
}

type AppEndpoint {
  # ID of the endpoint. This is a hash of endpoint labels.
  id: ID!
  # name of the endpoint, ex: redis-master
  name: String!
  # all labels for the endpoint
  labels: [Label!]!
  # Protocols supported by this endpoint.
  protocols: [Protocol!]!
  # If this field is set to true, this endpoint is excluded from the app model.
  disabled: Boolean!
  # CIDRs for this endpoint. These fields take precedence over the labels field, meaning if either of the cidrs lists is
  # not empty, the endpoint is defined based on CIDRs and the labels field should be ignored. Note that these fields will
  # be required once migration from the cidr field is complete.
  v4Cidrs: [String!]
  v6Cidrs: [String!]
  # DNS name of the endpoint.
  dnsName: String
  # name of an icon to use for displaying purposes
  icon: String
  # @deprecated(reason: "Use v4Cidrs/v6Cidrs.")
  cidr: String
  type: AppEndpointType

  hasIngressPolicyRules: Boolean
  hasEgressPolicyRules: Boolean
}

type Protocol {
  # id of a protocol, hash
  id: ID!
  # L3/L4 Protocol, e.g. TCP/UDP/ICMP
  l34Protocol: String!
  # List of source endpoints that are allowed to access this service. If this field is set, the service is assumed to be
  # L3/L4 only. For services that have L7 information, this field is set to null.
  allowedSources: [ID!]!
  allowedSourcesDisabled: [ID!]!
  # Optional L4 specific field
  # ex: 9080
  port: Int
  # Optional L7 specific fields
  # L7 protocol, e.g. HTTP. This field is set to null for L3/L4 only services.
  l7Protocol: String
  # List of HTTP rewrite rules. This field is set to null for L3/L4 only services and non-HTTP services.
  httpRewriteRules: [HttpRewriteRule!]
  # List of functions provided by this service. This field is set to null for L3/L4 only services.
  functions: [AppFunction!]
  # Application-level protocol. For example, the user can set this field to "elasticsearch" to indicate that it's
  # elasticsearch that's running on this HTTP port.
  applicationProtocol: String
}

input AppEndpointInput {
  # ID of the endpoint. This is a hash of endpoint labels.
  id: ID
  # name of the endpoint, ex: redis-master
  name: String!
  # all labels for the endpoint
  labels: [LabelInput!]!
  # protocols of the endpoint
  protocols: [ProtocolInput!]!
  # disabled or not
  disabled: Boolean!
  # CIDRs for this endpoint.
  v4Cidrs: [String!]
  v6Cidrs: [String!]
  # DNS name of the endpoint.
  dnsName: String
  # name of an icon to use for displaying purposes
  icon: String
  # @deprecated(reason: "Use v4Cidrs/v6Cidrs.")
  cidr: String
  type: AppEndpointType
}

input ProtocolInput {
  id: ID
  # L3/L4 Protocol, e.g. TCP/UDP/ICMP
  l34Protocol: String!
  allowedSources: [ID!]!
  allowedSourcesDisabled: [ID!]!
  # ex: 9080
  port: Int
  # Optional L7 specific fields
  # L7 protocol, e.g. HTTP. This field is set to null for L3/L4 only services.
  l7Protocol: String
  # List of HTTP rewrite rules. This field is set to null for L3/L4 only services and non-HTTP services.
  httpRewriteRules: [HttpRewriteRuleInput!]
  # List of functions provided by this service. This field is set to null for L3/L4 only services.
  functions: [AppFunctionInput!]
  # Application-level protocol. For example, the user can set this field to "elasticsearch" to indicate that it's
  # elasticsearch that's running on this HTTP port.
  applicationProtocol: String
}

type AppFunction {
  # id of function, hash
  id: ID!
  # Name of the function, e.g. "^GET /jobs/[0-9]+$".
  name: String!
  # List of source endpoints that are allowed to call this function.
  allowedSources: [ID!]!
  allowedSourcesDisabled: [ID!]!
  # If this field is set to true, this function is excluded from the app model.
  disabled: Boolean!
  # If function built from dns response set this field
  dnsResponse: FlowDnsResponse
  # If function built from http response set this field
  httpResponse: FlowHttpResponse
  # If function built from http response set this field
  metricsResponse: FlowMetricsResponse
}

input AppFunctionInput {
  id: ID
  # e.g. "^GET /jobs/[0-9]+$" (comes from flow name)
  name: String!
  # List of source endpoint that are allowed to call this function.
  allowedSources: [ID!]!
  allowedSourcesDisabled: [ID!]!
  # If this field is set to true, this function is excluded from the app model.
  disabled: Boolean!
  # If function built from dns response set this field
  dnsResponse: FlowDnsResponseInput
  # If function built from http response set this field
  httpResponse: FlowHttpResponseInput
  # If function built from http response set this field
  metricsResponse: FlowMetricsResponseInput
}

type HttpRewriteRule {
  # Global ID.
  id: ID!
  # Rewrite rule for HTTP methods, e.g. "^GET$"
  method: String!
  # Rewrite rule for HTTP request path, e.g. "^/jobs/([0-9]+)$".
  path: String!
}

input HttpRewriteRuleInput {
  # Global ID. If this field is set, the server stores it as is. Otherwise it generates one.
  id: ID
  # Rewrite rule for HTTP methods, e.g. "^GET$"
  method: String!
  # Rewrite rule for HTTP request path, e.g. "^/jobs/([0-9]+)$".
  path: String!
}

# Label
type Label {
  key: String!
  value: String!
}

type Query {
  # Returns the user that’s currently signed in, or null if the user is not signed in.
  # Specify orgName to swich to a specific organization.
  viewer(orgName: String): User
}

interface MutationOutput {
  # Error message. This field is set to null if the mutation succeeded.
  error: String
}

input LabelInput {
  key: String!
  value: String!
}

enum ClusterType {
  KUBERNETES
}

schema {
  query: Query
}
